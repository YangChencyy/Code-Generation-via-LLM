{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str):\n    groups = []\n    current_group = []\n    prev_group = []\n\n    for char in paren_string:\n        if char == '(':\n            current_group.append(char)\n        elif char == ')':\n            prev_group.append(''.join(current_group))\n            current_group = []\n    \n    groups.append(''.join(prev_group))\n    groups.append(''.join(current_group))\n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n\n    # get the integer part of the number\n    int_part = int(number)\n    # get the decimal part of the number\n    decimal_part = number - int_part\n\n    # return the decimal part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    MAD = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return MAD"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int):\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(numbers[i])\n            result.append(delimeter)\n    return result[:len(numbers)]"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n\n    # create a stack to store the parentheses\n    stack = []\n    # iterate over the string\n    for paren in paren_string:\n        # if the current parenthesis is opening, add it to the stack\n        if paren == '(':\n            stack.append(paren)\n        # if the current parenthesis is closing, pop all the opening parentheses from the stack\n        elif paren == ')':\n            n = len(stack)\n            while stack[-1]!= '(':\n                n -= 1\n            # remove all the opening parentheses from the stack\n            stack = stack[:n]\n            # add the number of opening parentheses in the stack to the result\n            yield n\n\n    # return the result\n    return list(stack)"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return sum, product"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    rolling_max_list = []\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        rolling_max_list.append(max_num)\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    \"\"\"\n    if not string:\n        return string\n    for i in range(len(string), -1, -1):\n        postfix = string[i:]\n        if postfix == postfix[::-1] and i > 0:\n            prefix = string[:i]\n            return prefix + postfix"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for s in strings:\n        if len(s) > len(longest_string):\n            longest_string = s\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while a!= b:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string)+1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int):\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive. \"\"\"\n    return''.join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    distinct_char_count = 0\n    for char in string:\n        if char not in distinct_char_count:\n            distinct_char_count.append(char)\n    return len(distinct_char_count)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n    \"\"\"\n    music_list = music_string.split()\n    music_list = [x[1:] for x in music_list]\n    music_list = [x.count('.') for x in music_list]\n    music_list = [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] + music_list\n    return music_list"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str):\n    # split the input string into individual words\n    words = numbers.split()\n    # create a list of numbers\n    num_list = []\n    # iterate over the list of words\n    for word in words:\n        # convert the word to an integer\n        num = int(word)\n        # add the integer to the list\n        num_list.append(num)\n    # sort the list\n    num_list.sort()\n    # create a new string with the sorted numbers\n    new_str = \"\"\n    # iterate over the sorted list\n    for num in num_list:\n        # convert the integer back to a word\n        word = str(num)\n        # add the word to the new string\n        new_str += word + \" \"\n    # return the new string\n    return new_str"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n    min_diff = float(\"inf\")\n    closest_pair = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    length = len(string)\n    return length"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    if n == 0:\n        return 0\n    largest_divisor = 0\n    for i in range(1, n):\n        if n % i == 0 and i > largest_divisor:\n            largest_divisor = i\n    return largest_divisor"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    current_factor = 2\n    while n >= 2:\n        if n % current_factor == 0:\n            n //= current_factor\n            factors.append(current_factor)\n            if n % current_factor == 0:\n                current_factor *= 2\n        else:\n            current_factor += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    unique_nums = []\n    for num in numbers:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase. \"\"\"\n    return ''.join(['L' if c.islower() else c.upper() for c in string])"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs)%2!= 0:\n        raise ValueError('list xs must have even number of elements.')\n    x = xs[-1]\n    while poly(xs, x)!= 0:\n        x -= 1\n    return x"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    l_len = len(l)\n    l_third = []\n    for i in range(0, l_len, 3):\n        l_third.append(l[i])\n    for i in range(1, l_len, 3):\n        l_third.append(l[i])\n    return l_third"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    max_element = l[0]\n    for x in l:\n        if x > max_element:\n            max_element = x\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i)[0] == '7' or str(i)[1] == '7':\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    l_even = []\n    l_odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_even.append(l[i])\n        else:\n            l_odd.append(l[i])\n\n    l_even.sort()\n    return l_odd + l_even"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    decoded_groups = []\n    for group in groups:\n        if len(group) == 3:\n            decoded_groups.append(group[1] + group[2] + group[0])\n        else:\n            decoded_groups.append(group)\n    return \"\".join(decoded_groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    fib_list = [2, 3, 5, 13]\n    for i in range(4, n):\n        fib_list.append(fib_list[i - 1] + fib_list[i - 2])\n    for num in fib_list:\n        if is_prime(num):\n            return num\n    return None"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            if l[i] + l[j] + l[k] == 0:\n                return True\n            elif l[i] + l[j] + l[k] < 0:\n                j += 1\n            else:\n                k -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    cars_left = n\n    cars_right = n\n    collision = 0\n    while cars_left > 0 and cars_right > 0:\n        if cars_left < cars_right:\n            cars_left += 1\n        elif cars_left > cars_right:\n            cars_right -= 1\n        else:\n            collision += 1\n            cars_left -= 1\n            cars_right -= 1\n    return collision"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    if base > 10 or base < 2:\n        raise ValueError(\"base should be between 2 and 10\")\n    if x == 0:\n        return '0'\n    else:\n        base_num = 0\n        base_pow = 1\n        while x > 0:\n            digit = x % base\n            base_num += digit * base_pow\n            x //= base\n            base_pow *= base\n        return str(base_num)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5*a*h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    fib4_sequence = [0, 0, 2, 0]\n    if n >= 4:\n        fib4_sequence.append(fib4_sequence[n-1] + fib4_sequence[n-2] + fib4_sequence[n-3] + fib4_sequence[n-4])\n    return fib4_sequence[n]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l.sort()\n    l = list(set(l))\n    n = len(l)\n    if n % 2 == 0:\n        m = l[n // 2]\n        return m\n    else:\n        m = l[n // 2]\n        return m + 0.5"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    # check if given string is palindrome\n    if text == text[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    if n == 0:\n        return 1\n    return (pow(2, modp(n-1, p), p) * pow(2, modp(1, p), p)) % p"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    return ''.join(char for char in text if char not in 'aeiouAEIOU')"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    count = 0\n    for i in range(len(brackets)):\n        if brackets[i] == '<':\n            count += 1\n        elif brackets[i] == '>':\n            count -= 1\n    if count == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    if len(l) <= 1:\n        return True\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    # create a set containing the common elements\n    common_set = set(l1) & set(l2)\n    # sort the set\n    sorted_common_set = sorted(common_set)\n    # return the list of sorted common elements\n    return list(sorted_common_set)"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    largest_prime = 0\n    for num in range(2, int(n**0.5)+1):\n        if n % num == 0 and is_prime(num):\n            largest_prime = max(largest_prime, num)\n    return largest_prime"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    # Create a dictionary to store the opening and closing brackets\n    opening_brackets = []\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            opening_brackets.append(i)\n        elif brackets[i] == \")\":\n            if len(opening_brackets) > 0:\n                opening_brackets.pop()\n            else:\n                return False\n    return len(opening_brackets) == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    result = []\n    for i in range(len(xs)):\n        result.append(xs[i] * (i + 1))\n    return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiou\"\n    count = 0\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    if s[-1] == \"y\":\n        count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    else:\n        return digits[n-shift:] + digits[:n-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[2])\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    if min_val!= float('inf'):\n        return [min_val, min_index]\n    else:\n        return []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    if not lst:\n        return -1\n\n    max_num = lst[0]\n    max_freq = 1\n\n    for num in lst:\n        if num > max_num:\n            max_num = num\n        if num == max_num:\n            max_freq += 1\n        if max_freq >= num:\n            return max_num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    min_index = 0\n    max_index = 0\n\n    for i in range(len(lst)):\n        if lst[i] < lst[min_index]:\n            min_index = i\n        elif lst[i] > lst[max_index]:\n            max_index = i\n\n    lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n\n    return strange_sort_list(lst)"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and c + a > b:\n        return (a * b * c) / 2.0\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    # Check if the list is balanced\n    if q == q[::-1]:\n        # Check if the sum of elements is less than the maximum possible weight\n        if sum(q) <= w:\n            return True\n    return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    # Iterate over the array and find the minimum number of elements that\n    # need to be changed to make the array palindromic\n    for i in range(n):\n        # If the element at the ith position is not the same as the element at the ith-1th position,\n        # then increment the count\n        if i > 0 and arr[i]!= arr[i-1]:\n            count += 1\n    # Return the count\n    return count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars = []\n    for s in lst1:\n        total_chars.append(len(s))\n    \n    total_chars2 = []\n    for s in lst2:\n        total_chars2.append(len(s))\n    \n    if len(total_chars) > len(total_chars2):\n        total_match_result = []\n        for i in range(len(total_chars2)):\n            if total_chars[i] < total_chars2[i]:\n                total_match_result.append(lst1[i])\n        return total_match_result\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a < 100:\n        if a % 2 == 0 and a % 3 == 0 and a % 5 == 0:\n            return True\n        else:\n            return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n        return is_simple_power(x // n, n)\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    for i in range(1, int(a**0.3)+1):\n        if i**3 == a:\n            return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    hex_nums = [2, 3, 5, 7, 11, 13, 17]\n    hex_count = 0\n    for i in range(len(num)):\n        if num[i] in ['A', 'B', 'C', 'D', 'E', 'F']:\n            hex_num = int(num[i], 16)\n            if hex_num in hex_nums:\n                hex_count += 1\n    return hex_count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n    \"\"\"\n\n    # Check if the given number is negative or not\n    if decimal < 0:\n        return \"db\" + bin(decimal)[2:] + \"db\"\n    else:\n        return \"db\" + bin(decimal)[2:] + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n-2):\n        if s[i] == s[i+1] and s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grade = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grade.append(\"A+\")\n        elif grade > 3.7:\n            letter_grade.append(\"A\")\n        elif grade > 3.3:\n            letter_grade.append(\"A-\")\n        elif grade > 3.0:\n            letter_grade.append(\"B+\")\n        elif grade > 2.7:\n            letter_grade.append(\"B\")\n        elif grade > 2.3:\n            letter_grade.append(\"B-\")\n        elif grade > 2.0:\n            letter_grade.append(\"C+\")\n        elif grade > 1.7:\n            letter_grade.append(\"C\")\n        elif grade > 1.3:\n            letter_grade.append(\"C-\")\n        elif grade > 1.0:\n            letter_grade.append(\"D+\")\n        elif grade > 0.7:\n            letter_grade.append(\"D\")\n        elif grade > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) == 2:\n        return True\n    elif len(string) == 1:\n        return True\n    elif len(string) <= 1:\n        return False\n    else:\n        for num in range(3, len(string), 2):\n            if len(string) % num == 0:\n                return False\n        return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(n+1):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # get the binary representation of N\n    binary_string = bin(N)[2:]\n    # convert the binary representation to a list of ints\n    binary_list = [int(digit) for digit in binary_string]\n    # sum all the digits in the binary representation\n    total = 0\n    for digit in binary_list:\n        total += digit\n    # return the binary representation of the total\n    return bin(total)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    total = 0\n    for i in range(0, len(lst), 2):\n        total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_words.append(' '.join(sorted(word, key=lambda x: ord(x))))\n    return''.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for row in lst:\n        x_found = False\n        for i in range(len(row) - 1, -1, -1):\n            if row[i] == x:\n                result.append((lst.index(row), i))\n                x_found = True\n        if x_found:\n            break\n    return result"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \"\"\"\n\n    sum = array[0] + array[-1]\n    if sum % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            encrypted_string += chr((ord(char) - 97 + 4) % 26 + 97)\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    # count the number of sentences that start with \"I\"\n    count = 0\n    # split the string into sentences\n    S = S.split('.|\\?|!')\n    # iterate over the sentences\n    for s in S:\n        if s.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.islower():\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += chr(ord(char) - 2)\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    \"\"\"\n    for i in lst:\n        if is_prime(i):\n            return sum_of_digits(i)\n\ndef is_prime(num):\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(num):\n    sum = 0\n    while num > 0:\n        digit = num % 10\n        sum += digit\n        num //= 10\n    return sum"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    elif all(isinstance(key, str) for key in dict):\n        return all(key.lower() == key for key in dict)\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    prime_list = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_list.append(i)\n    return prime_list"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    if a < 0 or b < 0:\n        return 0\n    \n    a_unit_digit = a % 10\n    b_unit_digit = b % 10\n    \n    return a_unit_digit * b_unit_digit"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    value = float(value)\n    if value > 0:\n        return int(value)\n    elif value < 0:\n        return int(value) - 1\n    else:\n        return int(value)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    piles = []\n    for i in range(n):\n        piles.append(i*2+1)\n    return piles"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.split(\", \")\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if (x % 2 == 0) and (y % 2 == 0):\n        for num in range(x, y + 1):\n            if (num % 2 == 0):\n                return num\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    rounded_avg = int(round(avg))\n    return bin(rounded_avg).replace(\"0b\", \"\")"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    result = []\n    for num in x:\n        for digit in str(num):\n            if int(digit) % 2!= 0:\n                result.append(num)\n                break\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    if not arr:\n        return []\n    \n    arr = sorted(arr)\n    arr.reverse()\n    \n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    \n    return [names[x] for x in arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    return [1 if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for number in arr:\n        if number < 0:\n            neg_digit = abs(number // 10)\n            if neg_digit > 0:\n                count += 1\n        else:\n            digits = [num for num in str(number)]\n            for digit in digits:\n                if int(digit) > 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    curr_max = 0\n    # Check the maximum number of right shift operation\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n    \n    # Shift elements till the maximum element reaches the start\n    while curr_max!= 0:\n        temp = arr[0]\n        for i in range(1, len(arr)):\n            arr[i - 1] = arr[i]\n        arr[len(arr) - 1] = temp\n        curr_max -= 1\n    \n    # Return True if the array is sorted in non-decreasing order\n    return arr == sorted(arr)"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n    lst1_even = 0\n    lst2_even = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            lst1_even += 1\n    for i in range(len(lst2)):\n        if lst2[i] % 2 == 0:\n            lst2_even += 1\n    if lst1_even + lst2_even >= len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n    letters = []\n    freq = {}\n    for letter in test.lower():\n        if letter in freq:\n            freq[letter] += 1\n        else:\n            freq[letter] = 1\n    most_freq = max(freq, key=freq.get)\n    return {most_freq: freq[most_freq]}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    result = \"\"\n    for i in s:\n        if i not in c:\n            result += i\n    if result == result[::-1]:\n        return (result, True)\n    return (result, False)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i\u2019s should be replaced by the number\n    of odd digits in the i\u2019th string of the input.\n    \"\"\"\n    return [\n        \"the number of odd elements %d in the string %s of the %sinput.\" \n        % (sum(int(x)%2 for x in lst[i]), \n            lst[i], lst[i], lst[i]) \n        for i in range(len(lst))]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        minSum = min(minSum + nums[i], nums[i])\n    return minSum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    m = len(grid)\n    n = len(grid[0])\n    total_water = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                total_water += 1\n\n    bucket_water = 0\n    bucket_lower = 0\n\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1 and bucket_water < capacity:\n                grid[i][j] = 0\n                bucket_water += 1\n            elif bucket_water == capacity:\n                bucket_lower += 1\n                bucket_water -= 1\n\n    return bucket_lower + math.floor(total_water / capacity)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    sort_list = []\n    for num in arr:\n        num_ones = 0\n        while num > 0:\n            if num % 2 == 1:\n                num_ones += 1\n            num //= 2\n        sort_list.append((num_ones, num))\n    sort_list.sort(key=lambda x: x[0])\n    return [num for num_ones, num in sort_list]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    consonants = 'BCDFGHJKLMNPQRSTVWXYZ'\n    selected_words = []\n    for word in words:\n        count = 0\n        for char in word:\n            if char in consonants:\n                count += 1\n        if count == n:\n            selected_words.append(word)\n    return selected_words"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn\u2019t count. Return empty string if you didn\u2019t\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n    \"\"\"\n    result = \"\"\n    for i in range(len(word) - 1):\n        if word[i] in \"aeiouAEIOU\" and word[i + 1].isalpha() and word[i + 2].isalpha():\n            result = word[i]\n    return result"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    # Check if the given list is valid\n    # Return 'No' if the list is not valid\n    if len(lst) == 0 or len(lst) % 2!= 0:\n        return 'No'\n    # Initialize the list of matching parentheses\n    match_list = []\n    # Iterate over the given list\n    for s in lst:\n        # Add the parenthesis to the matching list\n        if s == '(':\n            match_list.append('(')\n        # Check if the parenthesis is a closing parenthesis\n        elif len(match_list) > 0 and match_list[-1] == '(':\n            # Remove the parenthesis from the matching list\n            match_list.pop()\n        # Add the parenthesis to the matching list\n        else:\n            match_list.append(s)\n    # Check if the list is empty\n    if len(match_list) == 0:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort()\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_collatz = []\n    n = 1\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        odd_collatz.append(n)\n    odd_collatz.sort()\n    return odd_collatz"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    month = date[:2]\n    day = date[3:5]\n    year = date[6:]\n    if len(date)!= 10 or len(month)!= 2 or len(day)!= 2 or len(year)!= 4:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if year < 2000:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if len(txt.split()) > 0:\n        return txt.split()\n    else:\n        # Count the number of lower-case letters with odd order in the alphabet\n        count = 0\n        for i in range(ord('a'), ord('z') + 1):\n            if ord(txt[0]) == i:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    curr = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < curr:\n            return False\n        curr = lst[i]\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    if interval1[0] <= interval2[0] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    elif interval1[0] <= interval2[1] and interval2[1] <= interval1[1]:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    total = 0\n    for number in arr:\n        if number > 0:\n            total += number\n        elif number < 0:\n            total -= number\n    return total"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # Calculate the minimum path using a BFS\n    # Create a list of neighbors\n    neighbors = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    # Check the neighbors\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                # Mark the cell as visited\n                grid[i][j] = 2\n                # Check each neighbor\n                for m in range(len(neighbors)):\n                    x, y = i + neighbors[m][0], j + neighbors[m][1]\n                    # If the neighbor is in the grid and it hasn't been visited\n                    if (x, y) in grid and grid[x][y]!= 2:\n                        # Add the neighbor to the path\n                        return [grid[i][j]] + minPath(grid, k-1)\n                break\n    # Return the path\n    return []"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    # Initialize the list with the first two elements\n    tri_list = [1, 3]\n\n    # Iterate over the rest of the elements\n    for i in range(2, n):\n        # Append the element to the list\n        tri_list.append(tri_list[i - 2] + tri_list[i - 1] + (i / 2))\n\n    return tri_list"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    odd_digits = []\n    while n > 0:\n        if n % 10 % 2 == 1:\n            odd_digits.append(n % 10)\n        n //= 10\n    return 0 if not odd_digits else int(prod(odd_digits))"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    brackets = ['(', ')', '[', ']']\n    current = 0\n    for i in range(len(string)):\n        if string[i] in brackets:\n            current += 1\n            if string[i-1] == string[i]:\n                current -= 1\n            else:\n                if current > 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    sum_squares = 0\n    for i in lst:\n        sum_squares += int(i**2)\n    return sum_squares"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) > 0:\n        if txt[-1].isalpha():\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i-1\n    return largest_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    # Get the largest of negative numbers\n    largest_neg = None\n    for num in lst:\n        if num < 0 and (largest_neg == None or num > largest_neg):\n            largest_neg = num\n\n    # Get the smallest of positive numbers\n    smallest_pos = None\n    for num in lst:\n        if num > 0 and (smallest_pos == None or num < smallest_pos):\n            smallest_pos = num\n\n    # Return the tuple\n    return largest_neg, smallest_pos"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    \"\"\"\n    if type(a) == type(b):\n        if type(a) == int:\n            return max(a, int(b))\n        elif type(a) == float:\n            return max(a, float(b))\n        else:\n            return max(a, b)\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    even_sum = 0\n    i = 2\n    while even_sum < n and i < n:\n        even_sum += i\n        i += 2\n    return even_sum == n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    if len(text) == 0:\n        return text\n    \n    result = \"\"\n    count = 0\n    \n    for char in text:\n        if char == \" \":\n            count += 1\n            if count == 1:\n                result += \"_\"\n            elif count == 2:\n                result += \"-\"\n            else:\n                result += char\n        else:\n            count = 0\n            result += char\n    \n    return result"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name.replace('.','', 1).replace('0', '', 3)) <= 3:\n        if len(file_name.split('.')) == 2:\n            if file_name.split('.')[0][0].isalpha():\n                if file_name.split('.')[1].lower() in ['txt', 'exe', 'dll']:\n                    return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] * lst[i]\n        elif i % 4 == 0:\n            result += lst[i] * lst[i] * lst[i]\n        else:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return''.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n    \"\"\"\n\n    numerator1 = int(x.split('/')[0])\n    denominator1 = int(x.split('/')[1])\n    numerator2 = int(n.split('/')[0])\n    denominator2 = int(n.split('/')[1])\n\n    numerator = numerator1 * numerator2\n    denominator = denominator1 * denominator2\n\n    if numerator % denominator == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    if len(nums) == 0:\n        return []\n\n    nums_dict = {}\n    for num in nums:\n        nums_dict[num] = sum(str(num).split())\n\n    sorted_nums = sorted(nums_dict, key=lambda num: (nums_dict[num], num))\n    return sorted_nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    result = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 == 1 and num // 10 % 2 == 1:\n            result += 1\n    return result"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    max_triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k] % 3 == 0):\n                    max_triples += 1\n    return max_triples"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    result = []\n    for i in range(planet1_index+1, planet2_index):\n        result.append(planets[i])\n    return sorted(result)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    lst = [x for x in lst if len(x) % 2 == 0]\n    return sorted(lst, key=len)"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if (n % 2 == 0):\n        return y\n    else:\n        return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    odd_lst = [num for num in lst if num > 0 and num.is_integer()]\n    return sum([x ** 2 for x in odd_lst])"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    return [abs(game[i]-guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_strength = float('-inf')\n    strongest_name = ''\n    for extension in extensions:\n        cap = len(list(filter(str.isupper, extension)))\n        sm = len(list(filter(str.islower, extension)))\n        strength = cap - sm\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_name = extension\n    return f\"{class_name}.{strongest_name}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if b in a:\n        return True\n    else:\n        for i in range(len(a)-1):\n            temp = a[i:len(a)] + a[0:i]\n            if temp == b:\n                return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = \"\"\n    for key, value in roman_numerals.items():\n        while number >= key:\n            result += value\n            number -= key\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return a ** 2 + b ** 2 == c ** 2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_count:\n            max_count = unique_count\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if number + remaining < need:\n        return [number + remaining, remaining - (number + remaining)]\n    else:\n        return [need, remaining - need]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    if len(operator)!= len(operand)-1:\n        return \"Error: Operator list length must be equal to the length of the operand list minus one.\"\n    expression = \"\"\n    for i in range(len(operator)):\n        expression += str(operand[i]) + operator[i]\n    return eval(expression)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    res = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                res += s[i].lower()\n            else:\n                res += s[i].upper()\n        else:\n            res += s[i]\n    return res"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
