{"task_id": "HumanEval/0", "completion": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            result.append(''.join(stack))\n            stack = []\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    if result:\n        result.pop() # remove the last added delimiter\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "    result = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "    return sum(numbers), reduce(lambda x, y: x * y, numbers, 1)", "result": "failed: name 'reduce' is not defined", "passed": false}
{"task_id": "HumanEval/9", "completion": "    result = []\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "completion": "    original_string = string\n    reversed_string = string[::-1]\n    for i in range(len(string), 0, -1):\n        if string.endswith(string[:i][::-1]):\n            return string + reversed_string[:len(string) - i + 1][::-1]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "completion": "    return ''.join(str(int(i^j)) for i, j in zip(a, b))", "result": "failed: unsupported operand type(s) for ^: 'str' and 'str'", "passed": false}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_length = 0\n    longest_string = \"\"\n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n    return longest_string", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(1, len(string)+1)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "    return [4] * music_string.count('o') + [2] * music_string.count('o|') + [1] * music_string.count('.')", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "    nums = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=nums.get))", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    closest_pair = (None, None)\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "    return [val for val in values if isinstance(val, int)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "    return len(string)", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "    divisor = n - 1\n    while divisor > 0:\n        if n % divisor == 0:\n            return divisor\n        divisor -= 1\n    return 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        divisor += 1\n    return factors\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "    return [x for i, x in enumerate(numbers) if numbers.index(x) == i]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "completion": "    return ''.join([chr(219 - ord(char)) if char.islower() else char for char in string])", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "    def derivative(xs):\n        return [i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0]\n\n    x_new = 0\n    while True:\n        x_old = x_new\n        x_new -= poly(xs, x_old) / derivative(xs)[0]\n        if abs(x_new - x_old) < 1e-5:\n            break\n    return x_new", "result": "failed: name 'x' is not defined", "passed": false}
{"task_id": "HumanEval/33", "completion": "    sorted_values = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    for i in range(0, len(l), 3):\n        l[i] = sorted_values.pop(0)\n    return l\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "    return max(l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "    sorted_evens = sorted(l[::2])\n    l[::2] = sorted_evens\n    return l\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "    return ''.join(''.join(group[i:] + group[:i])[-3:] for i, group in enumerate([s[j:j+3] for j in range(0, len(s), 3)]))\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/39", "completion": "    fibs = [0, 1]\n    while True:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        if is_prime(next_fib):\n            if len(fibs) == n:\n                return next_fib\n        else:\n            continue\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n", "result": "failed: cannot access local variable 'is_prime' where it is not associated with a value", "passed": false}
{"task_id": "HumanEval/40", "completion": "    target = 0\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == target:\n                    return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "    return n * n // 2", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "    return str(bin(x))[2:] if base == 2 else str(oct(x))[2:] if base == 8 else str(x) #base conversion", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "    result = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        next_val = result[-1] + result[-2] + result[-3] + result[-4]\n        result.append(next_val)\n    return result[n]", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    l.sort()\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "    result = pow(n, 1, p)\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "    return ''.join([char for char in text if char not in 'aeiouAEIOU'])", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "    return all(num < t for num in l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "    return x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "    return sorted(list(set(l1) & set(l2)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(int(n**0.5), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return n  # n must be a prime number at this point, but since we assume n is not prime, this line should not be reached.", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "    return [i * xs[i] for i in range(1, len(xs))]", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(2, n):\n            a, b, c = b, c, a + b + c\n        return c\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "    count = sum(1 for char in s if char in \"aeiouAEIOU\" or (char == 'y' and s.endswith(char)))\n    return count", "result": "failed: Test 5", "passed": false}
{"task_id": "HumanEval/65", "completion": "    return str(x)[shift:] + str(x)[:shift] if shift < len(str(x)) else str(int(str(x)[::-1]))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "    return n - s.count('apples ') - s.count('oranges')", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/68", "completion": "    result = []\n    if not arr:\n        return result\n    \n    smallest_even = float('inf')\n    smallest_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            smallest_index = index\n            \n    if smallest_even != float('inf'):\n        result = [smallest_even, smallest_index]\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "completion": "    from collections import Counter\n\n    freq_counter = Counter(lst)\n    for num in sorted(freq_counter.keys(), reverse=True):\n        if freq_counter[num] >= num:\n            return num\n    return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))  # Minimum value\n        if sorted_lst:\n            result.append(sorted_lst.pop())  # Maximum value from the remaining\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "    a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "result": "failed: invalid syntax (<string>, line 13)", "passed": false}
{"task_id": "HumanEval/72", "completion": "    return sum(q) <= w and q == q[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "    changes_needed = sum(arr[i] != arr[~i] for i in range(len(arr) // 2))\n    return changes_needed\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "    lst1_total_chars = sum(len(s) for s in lst1)\n    lst2_total_chars = sum(len(s) for s in lst2)\n\n    if lst1_total_chars < lst2_total_chars:\n        return lst1\n    elif lst2_total_chars < lst1_total_chars:\n        return lst2\n    else:\n        return lst1", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_factors = []\n    for i in range(2, a + 1):\n        while a % i == 0 and is_prime(i):\n            prime_factors.append(i)\n            a //= i\n            \n    return len(prime_factors) == 3 and all(is_prime(p) for p in prime_factors)", "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return n == 1\n    while x % n == 0:\n        x /= n\n    return x == 1\n", "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "completion": "    return round(a ** (1/3)) ** 3 == a", "result": "failed: type complex doesn't define __round__ method", "passed": false}
{"task_id": "HumanEval/78", "completion": "    return sum(1 for char in num if char in \"2357BD\")", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "    return \"db\" + bin(decimal).replace(\"0b\", \"\") + \"db\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] != s[i] for i in range(len(s)-2))", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "    return [\n        'A+' if gpa >= 4.0 else\n        'A' if gpa > 3.7 else\n        'A-' if gpa > 3.3 else\n        'B+' if gpa > 3.0 else\n        'B' if gpa > 2.7 else\n        'B-' if gpa > 2.3 else\n        'C+' if gpa > 2.0 else\n        'C' if gpa > 1.7 else\n        'C-' if gpa > 1.3 else\n        'D+' if gpa > 1.0 else\n        'D' if gpa > 0.7 else\n        'D-' if gpa > 0.0 else\n        'E'\n        for gpa in grades\n    ]", "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "    return 2 * 9**(n-1) - 9**(n-2)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "    binary_representation = bin(N)[2:]\n    return bin(sum(int(digit) for digit in binary_representation))[2:]", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for index, value in enumerate(lst):\n        if index % 2 != 0 and value % 2 == 0:\n            total += value\n    return total\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for y, row in enumerate(lst):\n        for x in range(len(row)):\n            if row[x] == x:\n                result.append((y, x))\n    return sorted(result, key=lambda pair: (pair[0], -pair[1]))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/88", "completion": "    original_array = array.copy()\n    first_value = original_array[0]\n    last_value = original_array[-1]\n    sum_first_last = first_value + last_value\n    \n    if sum_first_last % 2 == 0:\n        sorted_array = sorted(original_array, reverse=True)\n    else:\n        sorted_array = sorted(original_array)\n    \n    return sorted_array", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    return ''.join(chr((ord(char) - ord('a') + 2 * 2) % 26 + ord('a')) for char in s)", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    first, second = None, None\n    for num in lst:\n        if first is None or num < first:\n            second = first\n            first = num\n        elif second is None or (num < second and num != first):\n            second = num\n    return second if second is not None else None", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/91", "completion": "    boredom_count = 0\n    sentences = S.split('.')\n    sentences = [s.strip() for s in sentences]\n    sentences = [s.split(' ') for s in sentences]\n    sentences = [' '.join(s) for s in sentences]\n    \n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0].lower() == 'i':\n            boredom_count += 1\n            \n    return boredom_count", "result": "passed", "passed": true}
{"task_id": "HumanEval/92", "completion": "    return x == y + z or y == x + z or z == x + y or x.is_integer() and y.is_integer() and z.is_integer()\n", "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/93", "completion": "    encoded_message = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower()) + 2\n                if index >= 5:\n                    index -= 5\n                encoded_message += chr((ord(char.lower()) - ord('a') + index) % 26 + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "    largest_prime = max([num for num in lst if self.is_prime(num)], default=0)\n    return sum(int(digit) for digit in str(largest_prime))\n\n    @staticmethod\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n'", "result": "failed: unterminated string literal (detected at line 26) (<string>, line 26)", "passed": false}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n\n    return all_lower or all_upper\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "    value_float = float(value)\n    rounded_value = round(value_float)\n    \n    if value_float > 0:\n        return rounded_value if value_float - rounded_value <= 0.5 else rounded_value + 1\n    else:\n        return rounded_value if rounded_value - value_float <= 0.5 else rounded_value - 1", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "completion": "    return [n] + [n + 2*i if n % 2 == 0 else n + 2*i + 1 for i in range(1, n)]", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/101", "completion": "    return s.replace(\",\", \" \").split()", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "    if x > y:\n        x, y = y, x\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = total // (m - n + 1)\n    return bin(avg)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/104", "completion": "    return sorted(set(str(num) for num in x if all(int(digit) % 2 for digit in str(num))))\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/105", "completion": "    result = []\n    for num in sorted(arr):\n        if 1 <= num <= 9:\n            result.append(\"Nine\" if num == 9 else \"Eight\" if num == 8 else \"Seven\" if num == 7 else \"Six\" if num == 6 else \"Five\" if num == 5 else \"Four\" if num == 4 else \"Three\" if num == 3 else \"Two\" if num == 2 else \"One\" if num == 1 else \"\")\n    return [name[::-1] for name in result][::-1]", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/106", "completion": "    return [reduce(mul, range(1, i+1) if i%2 else range(1, i), 1) for i in range(1, n+1)]\n    \n    from operator import mul\n    from functools import reduce", "result": "failed: cannot access local variable 'reduce' where it is not associated with a value", "passed": false}
{"task_id": "HumanEval/107", "completion": "    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    evens, odds = 0, 0\n    for num in range(1, n):\n        if is_palindrome(num) % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n\n    return (evens, odds)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/108", "completion": "    return sum(str(num).startswith('-') and sum(map(int, str(num)[1:])) > 0 or sum(map(int, str(num))) > 0 for num in arr)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n == 0:\n        return True\n\n    # Check if the array is already sorted or can become sorted with one right shift\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            # Find the first element that breaks the increasing order\n            break\n    else:\n        # If no such element found, array is already sorted or can be sorted with one right shift\n        return True\n\n    # Check if the element found is greater than the next element\n    if arr[i] > arr[i + 1]:\n        # If yes, check if there's a way to place it in the correct position\n        for j in range(i + 1, n):\n            if arr[j] <= arr[i]:\n                # Perform right shift from the end to make space for the element\n                for k in range(j, i, -1):\n                    arr[k] = arr[k - 1]\n                arr[i] = arr[j]\n                return True\n    return False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    \n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    if even_count + even_count_lst2 >= odd_count:\n        return \"YES\"\n    else:\n        return \"NO\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "completion": "    from collections import Counter\n\n    counts = Counter(test.split())\n    most_common = counts.most_common()\n    max_count = most_common[0][1]\n    result = {letter: count for letter, count in most_common if count == max_count}\n    return result", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/112", "completion": "    result_str = [char for char in s if char not in c]\n    reversed_str = result_str[::-1]\n    return (''.join(result_str), result_str == reversed_str)", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "    return ['the number of odd elements {}n the str{}ng {} of the {}utput.'.format(len([char for char in num if int(char) % 2 != 0]), len(num)*'1', num, len(num)*' ') for num in lst]", "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "completion": "    n = len(nums)\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for i in range(n):\n        current_sum += nums[i]\n        if current_sum > nums[i]:\n            current_sum = nums[i]\n        if current_sum < min_sum:\n            min_sum = current_sum\n            \n    return min_sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "    total_wells = len(grid)\n    total_rows = len(grid[0])\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / bucket_capacity)", "result": "failed: name 'bucket_capacity' is not defined", "passed": false}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "    word_list = s.split()\n    return [word for word in word_list if sum(c in 'bcdfghjklmnpqrstvwxyz' for c in word) == n]", "result": "failed: Second test error: ['lamb']", "passed": false}
{"task_id": "HumanEval/118", "completion": "    vowels = set('AEIOU')\n    word_length = len(word)\n    closest_vowel = \"\"\n\n    for i in range(word_length - 2):\n        if word[i] not in vowels and word[i+1] in vowels and word[i+2] not in vowels:\n            closest_vowel = word[i+1]\n            break\n\n    return closest_vowel\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "completion": "    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    return 'Yes' if is_balanced(''.join(lst)) or is_balanced(''.join(lst[::-1])) else 'No'", "result": "passed", "passed": true}
{"task_id": "HumanEval/120", "completion": "    return sorted(arr, reverse=True)[:k]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i, x in enumerate(lst):\n        if i % 2 == 0 and x % 2 != 0:\n            total += x\n    return total", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "    return sum(num for num in arr[:k] if num < 100)\n\n# Test cases\nprint(add_elements([111,21,3,4000,5,6,7,8,9], 4))  # Output: 24", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:  # Ensure n is odd before adding to sequence\n            sequence.append(n)\n\n    return sorted(list(set(sequence)))[:1] + sorted(list(set(sequence))[1:]) if len(sequence) > 1 else [sequence[0]]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/124", "completion": "    import re\n    if not date or len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    month, day, year = map(int, date.split('-'))\n    if not (1 <= month <= 12) or not (1 <= day <= 31):\n        return False\n    if month in [4, 6, 9, 11] and day == 31:\n        return False\n    if month == 2:\n        if day > 29:\n            return False\n        elif day == 29 and (not year % 4 or (year % 100 == 0 and not year % 400)):\n            return True\n        else:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    if not words:\n        words = txt.split(',')\n        if not words:\n            return sum(1 for c in txt if 'a' <= c <= 'z' and (ord(c) - ord('a')) % 2 == 1)\n    return words\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "completion": "    return lst == sorted(lst) and lst == sorted(set(lst), key=lst.index)", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "completion": "    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n\n    if start_max > end_min:\n        return \"NO\"\n\n    intersection_length = end_min - start_max\n    return \"YES\" if is_prime(intersection_length) else \"NO\"\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign_product = 1\n    total_sum = 0\n    for num in arr:\n        if num < 0:\n            sign_product *= -1\n        elif num > 0:\n            sign_product *= 1\n        total_sum += abs(num) * sign_product\n    return total_sum", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "completion": "    def dfs(x, y, path, visited, remaining_steps):\n        if remaining_steps == 0:\n            nonlocal min_path\n            if min_path is None or path < min_path:\n                min_path = path.copy()\n            return\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                visited[nx][ny] = True\n                dfs(nx, ny, path + [grid[nx][ny]], visited, remaining_steps - 1)\n                visited[nx][ny] = False\n\n    n = len(grid)\n    min_path = []\n    visited = [[False] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            dfs(i, j, [grid[i][j]], visited, k - 1)\n            visited[i][j] = False\n    return min_path\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "completion": "    result = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            result.append(i // 2)\n        else:\n            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n    return result[:-1]", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    is_all_even = True\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            is_all_even = False\n        else:\n            product *= digit\n        n //= 10\n    return product if not is_all_even else 0", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "completion": "    def is_nested_helper(s, depth=0, max_depth=0):\n        if not s:\n            return max_depth > 0\n        \n        open_bracket = s.startswith(['[', '('])\n        close_bracket = s.endswith([']', ')'])\n        \n        if open_bracket and not close_bracket:\n            return is_nested_helper(s[1:], depth+1, max_depth)\n        elif close_bracket and not open_bracket:\n            return is_nested_helper(s[:-1], depth-1, max_depth)\n        else:\n            return is_nested_helper(s[1:-1], depth, max(max_depth, depth))\n    \n    return is_nested_helper(string)", "result": "failed: startswith first arg must be str or a tuple of str, not list", "passed": false}
{"task_id": "HumanEval/133", "completion": "    return sum(int(math.ceil(num)) ** 2 for num in lst)", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/134", "completion": "    last_char = txt[-1]\n    return last_char.isalpha() and not txt[-2:].isalpha()", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "completion": "    largest_index = -1\n    for i in range(len(arr)):\n        if largest_index != -1 and arr[i] > arr[largest_index]:\n            continue\n        if largest_index == -1 or arr[i] >= arr[largest_index]:\n            largest_index = i\n        else:\n            return largest_index\n    return largest_index", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "completion": "    neg_int = max((x for x in lst if x < 0), default=None)\n    pos_int = min((x for x in lst if x > 0), default=None)\n    return (neg_int, pos_int)", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "    try:\n        float_a = float(a)\n        float_b = float(b)\n        if float_a == float_b:\n            return None\n        elif float_a > float_b:\n            return float_a\n        else:\n            return float_b\n    except ValueError:\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b", "result": "failed: '>' not supported between instances of 'int' and 'str'", "passed": false}
{"task_id": "HumanEval/138", "completion": "    return n % 4 == 0 and n > 0", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "completion": "    return math.factorial(n) * special_factorial(n-1) if n else 1\nUse of `math.factorial` is allowed.", "result": "failed: invalid syntax (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\").replace(\"   \", \"-\")", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "    import re\n    name_parts = file_name.split('.')\n    if len(name_parts) != 2:\n        return 'No'\n    if len(re.findall('[0-9]', name_parts[0])) > 3:\n        return 'No'\n    if not re.match('[a-zA-Z][a-zA-Z0-9]*', name_parts[0]):\n        return 'No'\n    if name_parts[1].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "completion": "    total_sum = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total_sum += num ** 2\n        elif i % 4 == 0:\n            total_sum += num ** 3\n    return total_sum\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "completion": "    primes = [i for i in range(2, len(sentence)) if all(i % j != 0 for j in range(2, int(i**0.5)+1))]\n    words = sentence.split()\n    result = ''\n    for word in words:\n        if len(word) in primes:\n            result += word + ' '\n    return result.strip()", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "    try:\n        num_x, den_x = map(int, x.split('/'))\n        num_n, den_n = map(int, n.split('/'))\n        result_num = num_x * num_n\n        result_den = den_x * den_n\n        gcd = math.gcd(result_num, result_den)\n        return result_num // gcd == result_num / result_den\n    except Exception:\n        return False", "result": "failed: test1", "passed": false}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        str_num = str(abs(num))\n        if int(str_num[0]) % 2 != 0 and int(str_num[-1]) % 2 != 0 and num > 10:\n            count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "    count = [0] * 3\n    for i in range(1, n + 1):\n        val = i * i - i + 1\n        count[val % 3] += 1\n    \n    total_triples = 0\n    for i in range(2, 3):  # i can be 0 or 1 but not 2 as we need i < j < k\n        total_triples += count[i] * (count[i] - 1) // 2\n        total_triples += count[i] * (count[i - 1] - 1) // 2\n        total_triples += count[i] * (count[i + 1] - 1) // 2\n    \n    return total_triples % 1000000007", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet_index1 = planets.index(planet1)\n    planet_index2 = planets.index(planet2)\n\n    if planet_index1 == -1 or planet_index2 == -1:\n        return ()\n\n    if planet_index1 > planet_index2:\n        planet_index1, planet_index2 = planet_index2, planet_index1\n\n    return tuple(planets[planet_index1 + 1:planet_index2])", "result": "failed: 'Makemake' is not in list", "passed": false}
{"task_id": "HumanEval/149", "completion": "    lst = sorted(set(lst), key=lambda x: (len(x), x))\n    return lst[:len(set(lst))]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/150", "completion": "    from sympy import isprime\n\n    if isprime(n):\n        return x\n    else:\n        return y\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and num.is_integer() and num % 2 != 0:\n            total += num ** 2\n    return total", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "    return [abs(g - s) for g, s in zip(guess, game)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = ''\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = cap_count - sm_count\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if a.find(rotated) != -1:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "    mapping = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'),\n               (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'),\n               (5, 'v'), (4, 'iv'), (1, 'i')]\n    \n    result = []\n    for value, numeral in mapping:\n        count = number // value\n        result.append(numeral * count)\n        number -= value * count\n    \n    return ''.join(result).lower()", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "    a_squared = a * a\n    b_squared = b * b\n    c_squared = c * c\n    return a_squared + b_squared == c_squared or a_squared + c_squared == b_squared or b_squared + c_squared == a_squared", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or \\\n           (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n            \n    return max_word", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(remaining - need, 0)\n    return [total_eaten, remaining_after_meals]", "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    hasLetter = False\n    for char in s:\n        if char.isalpha():\n            hasLetter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result if hasLetter else result[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "    return None if not text else hashlib.md5(text.encode()).hexdigest()", "result": "failed: name 'hashlib' is not defined", "passed": false}
{"task_id": "HumanEval/163", "completion": "    return sorted([int(digit) for digit in str(num) if int(digit) % 2 == 0 for num in range(a, b + 1)])", "result": "failed: name 'num' is not defined", "passed": false}
