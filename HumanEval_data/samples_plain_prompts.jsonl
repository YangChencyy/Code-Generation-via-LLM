{"task_id": "HumanEval/0", "completion": "from typing import *\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "from typing import *\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    stack = []\n    start_index = 0\n\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            if not stack:\n                start_index = i\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                groups.append(paren_string[start_index:i+1])\n\n    return groups\n"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "from typing import *\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_val = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean_val) for x in numbers) / len(numbers)\n    return mad\n"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.extend([delimiter, num])\n    return result[:-1]\n"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results\n"}
{"task_id": "HumanEval/7", "completion": "from typing import *\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)\n"}
{"task_id": "HumanEval/9", "completion": "from typing import *\nfrom itertools import accumulate\nfrom operator import ge\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    return list(accumulate(numbers, lambda a, b: b if b > a else a))\n"}
{"task_id": "HumanEval/10", "completion": "def longest_palindromic_postfix(string: str) -> str:\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string[i:]\n    return ''\n\ndef make_palindrome(string: str) -> str:\n    palindromic_postfix = longest_palindromic_postfix(string)\n    prefix = string[:len(string) - len(palindromic_postfix)]\n    return string + prefix[::-1]\n"}
{"task_id": "HumanEval/11", "completion": "from typing import *\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x)^int(y)) for x, y in zip(a, b))\n"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "from typing import *\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)+1)]\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    numeral_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_nums = sorted(numbers.split(), key=lambda x: numeral_map[x])\n    return ' '.join(sorted_nums)\n"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest = None\n    min_diff = float('inf')\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest = (numbers[i], numbers[i+1])\n    return closest\n"}
{"task_id": "HumanEval/21", "completion": "from typing import *\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "from typing import *\nfrom math import sqrt\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    # n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        # While i divides n, append i and divide n\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    # Condition if n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "from typing import *\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    unique_numbers = []\n    for num in numbers:\n        if num not in seen:\n            unique_numbers.append(num)\n            seen.add(num)\n    return unique_numbers\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()\n"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "from typing import *\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    return [num for num in l if num > 0]\n"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"List of coefficients must have an even number of elements.\")\n    \n    def bisection(a, b):\n        while abs(a - b) > 1e-6:\n            mid = (a + b) / 2\n            if poly(xs, mid) == 0:\n                return mid\n            elif poly(xs, a) * poly(xs, mid) < 0:\n                b = mid\n            else:\n                a = mid\n        return (a + b) / 2\n    \n    max_coeff = max((abs(coeff), idx) for idx, coeff in enumerate(xs))[1]\n    if max_coeff % 2 != 0:\n        raise ValueError(\"Largest non-zero coefficient must be at an even index.\")\n    \n    a, b = -10, 10\n    return bisection(a, b)\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    return [x for i, x in sorted(enumerate(l), key=lambda k: k[0] % 3 == 0)]\n"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = sorted(l[i] for i in range(0, len(l), 2))\n    return [even_indices[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]\n"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fib(n: int) -> int:\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\ndef prime_fib(n: int) -> int:\n    count, i = 0, 0\n    while count < n:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            count += 1\n        i += 1\n    return fib_num\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n * n\n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9\")\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result if result else \"0\"\n"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 2\n    dp = [0] * (n + 1)\n    dp[0], dp[1], dp[2], dp[3] = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]\n"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)\n"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)\n"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n            \n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    return sorted(set(l1) & set(l2))\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y' or s[-1] == 'Y':\n        count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    s = str(x)\n    n = len(s)\n    if shift >= n:\n        return s[::-1]\n    return s[-shift:] + s[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples_oranges = s.split(' ')\n    apples = int(apples_oranges[0])\n    oranges = int(apples_oranges[3])\n    mangoes = n - (apples + oranges)\n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            index = i\n    return [smallest_even, index] if index != -1 else []\n"}
{"task_id": "HumanEval/69", "completion": "from collections import Counter\n\ndef search(lst):\n    freq = Counter(lst)\n    for num in sorted(freq, key=lambda x: (-x, -freq[x])):\n        if freq[num] >= num:\n            return num\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)\n"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    def count_chars(lst):\n        return sum(len(s) for s in lst)\n\n    chars1 = count_chars(lst1)\n    chars2 = count_chars(lst2)\n\n    return lst1 if chars1 <= chars2 else lst2 if chars2 <= chars1 else lst1\n"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x\n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return round(a ** (1/3)) ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(digit in primes for digit in num)\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return \"db0db\"\n    binary = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal = decimal // 2\n    return f\"db{binary}db\"\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] != s[i] for i in range(len(s)-2))\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0:\n            letter_grades.append('A+')\n        elif g > 3.7:\n            letter_grades.append('A')\n        elif g > 3.3:\n            letter_grades.append('A-')\n        elif g > 3.0:\n            letter_grades.append('B+')\n        elif g > 2.7:\n            letter_grades.append('B')\n        elif g > 2.3:\n            letter_grades.append('B-')\n        elif g > 2.0:\n            letter_grades.append('C+')\n        elif g > 1.7:\n            letter_grades.append('C')\n        elif g > 1.3:\n            letter_grades.append('C-')\n        elif g > 1.0:\n            letter_grades.append('D+')\n        elif g > 0.7:\n            letter_grades.append('D')\n        elif g > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    return 2 * (10**(n-1)) - 10\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    import re\n    words = re.split(r'(\\s+)', s)\n    result = []\n    for word in words:\n        if word.strip():\n            sorted_word = ''.join(sorted(word))\n            result.append(sorted_word)\n        else:\n            result.append(word)\n    return ''.join(result)\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coords = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coords.append((i, j))\n    coords.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coords\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n    \n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\nprint(sort_array([]))          # => []\nprint(sort_array([5]))          # => [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))  # => [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))  # => [6, 5, 4, 3, 2, 1, 0]\n"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    def rotate(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= c <= 'Z':\n            return chr((ord(c) - ord('A') + 4) % 26 + ord('A'))\n        return c\n    \n    return ''.join(rotate(c) for c in s)\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique_lst = sorted(set(lst))\n    return unique_lst[1] if len(unique_lst) > 1 else None\n"}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    sentences = re.split(r'[.?!]', S)\n    count = sum(1 for sentence in sentences if sentence.strip().startswith('I'))\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return (x == y + z) or (y == x + z) or (z == x + y)\n    return False\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiou'\n    vowel_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n                 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += vowel_map[char]\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    max_prime = max((x for x in lst if is_prime(x)), default=0)\n    return sum_of_digits(max_prime)\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lower_case = set(k for k in dict.keys() if isinstance(k, str) and k.islower())\n    upper_case = set(k for k in dict.keys() if isinstance(k, str) and k.isupper())\n    return len(lower_case) == len(dict) or len(upper_case) == len(dict)\n"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    def get_unit_digit(n):\n        return abs(n) % 10\n    \n    return get_unit_digit(a) * get_unit_digit(b)\n"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n"}
{"task_id": "HumanEval/99", "completion": "import math\n\ndef closest_integer(value):\n    num = float(value)\n    fractional_part = num - math.floor(num)\n    if fractional_part == 0.5 or fractional_part == -0.5:\n        return math.ceil(num) if num > 0 else math.floor(num) - 1\n    else:\n        return round(num)\n\n# Test cases\nprint(closest_integer(\"10\"))      # 10\nprint(closest_integer(\"15.3\"))    # 15\nprint(closest_integer(\"14.5\"))    # 15\nprint(closest_integer(\"-14.5\"))   # -15\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = []\n    current_stones = n\n    for _ in range(n):\n        pile.append(current_stones)\n        if current_stones % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n    return pile\n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    import re\n    return re.split(r'[ ,]+', s)\n"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    for num in range(max(x, y), min(x, y) - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1\n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return \"0b\" + bin(avg)[2:]\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    def has_even_digit(n):\n        return any(int(d) % 2 == 0 for d in str(n))\n    \n    return sorted([num for num in x if not has_even_digit(num)])\n"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    def get_name(digit):\n        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digit - 1]\n\n    filtered_sorted = sorted([x for x in arr if 1 <= x <= 9])\n    reversed_sorted = filtered_sorted[::-1]\n    named_numbers = [get_name(num) for num in reversed_sorted]\n    return named_numbers\n"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    def sum_to_x(x):\n        return x * (x + 1) // 2\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) if int(digit) >= 0 else -int(digit) for digit in str(n))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    n = len(arr)\n    count = 0\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n            if count > 1:\n                return False\n    if arr[n - 1] > arr[0]:\n        count += 1\n    return count == 1\n"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    for num in lst1:\n        if num % 2 != 0:\n            found = False\n            for num2 in lst2:\n                if num2 % 2 == 0:\n                    found = True\n                    break\n            if not found:\n                return \"NO\"\n    return \"YES\"\n"}
{"task_id": "HumanEval/111", "completion": "from collections import Counter\n\ndef histogram(test):\n    if not test:\n        return {}\n    letter_counts = Counter(test.split())\n    max_count = max(letter_counts.values(), default=0)\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    return result\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    for char in set(c):\n        s = s.replace(char, '')\n    result = s == s[::-1]\n    return (s, result)\n"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    def count_odds(s):\n        return sum(int(digit) % 2 != 0 for digit in s)\n    \n    result = []\n    for i, s in enumerate(lst):\n        num_odds = count_odds(s)\n        result.append(f\"the number of odd elements {num_odds}n the str{num_odds}ng {num_odds} of the {num_odds}nput.\")\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    return sum(math.ceil(sum(row) / capacity) for row in grid)\n"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def count_ones(n):\n        return bin(n).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for char in word if char.lower() in 'bcdfghjklmnpqrstvwxyz')\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return ''\n"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    if is_good(lst[0] + lst[1]) or is_good(lst[1] + lst[0]):\n        return 'Yes'\n    return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    def has_two_digits(n):\n        return 0 <= n < 100 or -100 <= n < 0\n    \n    return sum(filter(has_two_digits, arr[:k]))\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    def collatz_sequence(num):\n        sequence = []\n        while num != 1:\n            sequence.append(num)\n            if num % 2 == 0:\n                num //= 2\n            else:\n                num = 3 * num + 1\n        sequence.append(1)\n        return sequence\n    \n    odd_numbers = [num for num in collatz_sequence(n) if num % 2 != 0]\n    return sorted(odd_numbers)\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    import re\n    from datetime import datetime\n    \n    pattern = r\"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\d{4}$\"\n    if not re.match(pattern, date):\n        return False\n    \n    try:\n        datetime.strptime(date, \"%m-%d-%Y\")\n    except ValueError:\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        return 1 <= day <= 29\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if ord(c) - ord('a') < 26 and (ord(c) - ord('a')) % 2 == 1)\n"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    \n    prev = lst[0]\n    duplicates = False\n    \n    for num in lst[1:]:\n        if num < prev:\n            return False\n        if num == prev:\n            if duplicates:\n                return False\n            duplicates = True\n        else:\n            duplicates = False\n        prev = num\n    \n    return True\n"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    return \"YES\" if is_prime(length) else \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    zero_count = 0\n    for num in arr:\n        if num < 0:\n            sign_product *= -1\n        elif num == 0:\n            zero_count += 1\n        else:\n            magnitude_sum += abs(num)\n    if zero_count > 0:\n        return 0\n    return sign_product * magnitude_sum\n"}
{"task_id": "HumanEval/129", "completion": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    visited = [[False] * N for _ in range(N)]\n    pq = []\n    heappush(pq, (grid[0][0], 0, 0))\n    \n    while pq:\n        val, x, y = heappop(pq)\n        if k == 1:\n            return [val]\n        visited[x][y] = True\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny]:\n                heappush(pq, (grid[nx][ny], nx, ny))\n        k -= 1\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [1, 3]\n    sequence = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            next_value = 1 + i // 2\n        else:\n            next_value = sequence[-1] + sequence[-2] + sequence[i]\n        sequence.append(next_value)\n    return sequence[:n + 1]\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            nested = True\n    \n    return nested and not stack\n"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)\n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    second_last_char = txt[-2] if len(txt) > 1 else None\n    return last_char.isalpha() and (second_last_char == \" \" or second_last_char == \"\")\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    \n    a = min(negatives) if negatives else None\n    b = min(positives) if positives else None\n    \n    return (a, b)\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    def convert_to_float_if_possible(value):\n        try:\n            return float(value.replace(',', '.'))\n        except ValueError:\n            return value\n\n    a_converted = convert_to_float_if_possible(a)\n    b_converted = convert_to_float_if_possible(b)\n\n    if isinstance(a_converted, float) or isinstance(b_converted, float):\n        return max(a_converted, b_converted)\n    else:\n        return a_converted if a_converted >= b_converted else b_converted\n\n    return None\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n < 8 or n % 2 != 0:\n        return False\n    return True\n"}
{"task_id": "HumanEval/139", "completion": "from math import factorial\n\ndef special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = []\n    space_count = 0\n    \n    for char in text:\n        if char == ' ':\n            space_count += 1\n        else:\n            if space_count > 2:\n                result.append('-')\n            elif space_count == 2:\n                result.pop()\n                result.append('-')\n            space_count = 0\n            result.append(char)\n    \n    if space_count > 2:\n        result.append('-')\n    elif space_count == 2:\n        result.pop()\n        result.append('-')\n    \n    return ''.join(result)\n"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    import re\n    pattern = r'^[a-zA-Z][^\\d]{0,2}\\d*[.](txt|exe|dll)$'\n    return 'Yes' if re.match(pattern, file_name) else 'No'\n"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            total += x ** 2\n        elif i % 4 == 0:\n            total += x ** 3\n    return total\n"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split(\" \")\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    num1, den1 = map(int, x.split('/'))\n    num2, den2 = map(int, n.split('/'))\n    return (num1 * den2) % (den1 * num2) == 0\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def digit_sum(n):\n        return sum(int(d) for d in str(abs(n))) + (n < 0)\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def is_odd_digit(n):\n        return int(str(abs(n))[-1]) % 2 != 0 and int(str(abs(n))[0]) % 2 != 0\n    \n    return sum(1 for num in nums if num > 10 and is_odd_digit(num))\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    def count_mod_3(arr):\n        cnt = [0, 0, 0]\n        for x in arr:\n            cnt[x % 3] += 1\n        return cnt\n    \n    def comb(n, k):\n        if k > n:\n            return 0\n        if k == 0 or k == n:\n            return 1\n        return comb(n-1, k-1) + comb(n-1, k)\n    \n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    mod_counts = count_mod_3(a)\n    return comb(mod_counts[1], 2) * mod_counts[0] + comb(mod_counts[2], 3)\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1, index2 = -1, -1\n    for i, p in enumerate(planets):\n        if p == planet1:\n            index1 = i\n        if p == planet2:\n            index2 = i\n    if index1 == -1 or index2 == -1:\n        return ()\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1+1:index2])\n"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda word: (len(word), word))\n"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(guess, game)]\n"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        upper_count = sum(1 for c in extension if c.isupper())\n        lower_count = sum(1 for c in extension if c.islower())\n        return upper_count - lower_count\n    \n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a , b):\n    for i in range(len(b)):\n        if b in a or b[(i+1):] + b[:i+1] in a:\n            return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word)), word\n\n    return max(words, key=unique_chars, default=\"\")\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]\n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    start, end = min(a, b), max(a, b)\n    for num in range(start, end + 1):\n        if all(int(digit) % 2 == 0 for digit in str(num)):\n            result.append(num)\n    return result\n"}
