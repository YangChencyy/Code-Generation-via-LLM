{"task_id": "HumanEval/0", "completion": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    current_group = ''\n    \n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')' and stack:\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = ''\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for idx, num in enumerate(numbers):\n        result.append(num)\n        if idx < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "    depths = []\n    current_depth = 0\n    max_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            depths.append(max_depth)\n            max_depth = 0\n            \n    depths.append(max_depth)\n    \n    return depths", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "    sum_result = 0\n    product_result = 1\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return sum_result, product_result", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "    rolling_max_list = []\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        rolling_max_list.append(current_max)\n    \n    return rolling_max_list", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "completion": "    n = len(string)\n    for i in range(n):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[1:][::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "completion": "    def xor_bits(x: str, y: str) -> str:\n        return str(int(x) ^ int(y))\n\n    max_len = max(len(a), len(b))\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n\n    result = ''.join(xor_bits(a[i], b[i]) for i in range(max_len))\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "    longest_str = None\n    max_length = 0\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            longest_str = s\n    return longest_str if longest_str else None", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "    return \" \".join(str(i) for i in range(n + 1))", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "    lower_string = string.lower()\n    distinct_chars = set(lower_string)\n    return len(distinct_chars)", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "    return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "    numeral_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_nums = sorted(numbers.split(), key=lambda x: numeral_map[x])\n    return ' '.join(sorted_nums)", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "    min_distance = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                result = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    \n    return [(x - min_val) / range_val for x in numbers]", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "    return sum(1 for _ in string)", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "completion": "    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "    result = \"\"\n    for s in strings:\n        result += s\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "    def find_zero(xs: list):\n    a = xs[-1]\n    b = xs[-2]\n    if a == 0 or b == 0:\n        raise ValueError(\"Largest non-zero coefficient must be present.\")\n    return b / a", "result": "failed: expected an indented block after function definition on line 24 (<string>, line 25)", "passed": false}
{"task_id": "HumanEval/33", "completion": "    divisible_by_three = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    result = []\n    div_idx = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(divisible_by_three[div_idx])\n            div_idx += 1\n        else:\n            result.append(l[i])\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "completion": "    unique_elements = []\n    seen = set()\n    for elem in l:\n        if elem not in seen:\n            seen.add(elem)\n            unique_elements.append(elem)\n    return sorted(unique_elements)", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for elem in l:\n        if elem > max_val:\n            max_val = elem\n    return max_val", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for num in range(n):\n        if num % 11 == 0 or num % 13 == 0:\n            count += str(num).count('7')\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "    even_indices = [i for i, _ in enumerate(l) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    \n    result = l.copy()\n    for i, val in zip(even_indices, even_values):\n        result[i] = val\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "    def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "result": "failed: expected an indented block after function definition on line 18 (<string>, line 19)", "passed": false}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b", "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "    return n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "completion": "    for i in range(len(l)):\n        l[i] += 1\n    return l", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "    def convert_to_base(num, base):\n        digits = []\n        while num > 0:\n            digits.append(str(num % base))\n            num //= base\n        return ''.join(digits[::-1])\n\n    return convert_to_base(x, base)", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "    fib_values = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        next_value = fib_values[0] + fib_values[1] + fib_values[2] + fib_values[3]\n        fib_values = [fib_values[1], fib_values[2], fib_values[3], next_value]\n    \n    return fib_values[3]", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "    return all(text[i] == text[-i-1] for i in range(len(text) // 2))", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    n = n % (p - 1)\n    for _ in range(n):\n        result = (result * 2) % p\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "    def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "result": "failed: expected an indented block after function definition on line 14 (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "    return x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "    from collections import Counter\n    \n    return Counter(s0) == Counter(s1)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "completion": "    fib_1, fib_2 = 0, 1\n    for _ in range(n):\n        fib_1, fib_2 = fib_2, fib_1 + fib_2\n    return fib_1", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "    diff = None\n    for i in range(1, len(l)):\n        current_diff = l[i] - l[i-1]\n        if diff is None:\n            diff = current_diff\n        elif (diff > 0 and current_diff < 0) or (diff < 0 and current_diff > 0):\n            return False\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "    unique_elements = set()\n    result = []\n    for elem in l1:\n        unique_elements.add(elem)\n    for elem in l2:\n        if elem in unique_elements and elem not in result:\n            result.append(elem)\n    return sorted(result)", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "    for factor in range(int(n**0.5), 1, -1):\n        if n % factor == 0:\n            while n % factor == 0:\n                n //= factor\n            if n == 1:\n                return factor\n    return 2", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/60", "completion": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "    balance = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            balance += 1\n        elif bracket == \")\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "    derivate_coeffs = []\n    for i in range(1, len(xs)):\n        derivate_coeffs.append(xs[i] * i)\n    return derivate_coeffs", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "    fibfib_values = [0, 0, 1]\n    for i in range(3, n + 1):\n        next_value = fibfib_values[i - 1] + fibfib_values[i - 2] + fibfib_values[i - 3]\n        fibfib_values.append(next_value)\n    \n    return fibfib_values[n]", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    length = len(num_str)\n    shift %= length\n    if shift == 0:\n        return num_str\n    return num_str[-shift:] + num_str[:-shift]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "    fruits_str, total_fruits = s.split(\" and \")\n    apples, oranges = map(int, fruits_str.split())\n    return total_fruits - apples - oranges", "result": "failed: invalid literal for int() with base 10: 'apples'", "passed": false}
{"task_id": "HumanEval/68", "completion": "    def pluck(arr):\n    smallest_even = None\n    smallest_index = None\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even or (val == smallest_even and i < smallest_index):\n                smallest_even = val\n                smallest_index = i\n    return [smallest_even, smallest_index] if smallest_even is not None else []", "result": "failed: expected an indented block after function definition on line 36 (<string>, line 37)", "passed": false}
{"task_id": "HumanEval/69", "completion": "    from collections import Counter\n    \n    freq_counter = Counter(lst)\n    \n    result = -1\n    for num in sorted(freq_counter.keys(), reverse=True):\n        if freq_counter[num] >= num:\n            result = num\n            break\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "    def is_palindrome(lst):\n        return lst == lst[::-1]\n    \n    return is_palindrome(q) and sum(q) <= w", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "    def count_chars(lst):\n        return sum(len(s) for s in lst)\n\n    total1 = count_chars(lst1)\n    total2 = count_chars(lst2)\n\n    return lst1 if total1 <= total2 else lst2 if total2 <= total1 else lst1", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "    from sympy import isprime\n    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "completion": "    for i in range(int(x ** (1 / n)) + 2):\n        if 4 ** i == x:\n            return True\n    return False", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "completion": "    for i in range(-1000, 1000):\n        if i**3 == a:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "completion": "    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "    binary_str = \"\"\n    while decimal > 0:\n        binary_str = str(decimal % 2) + binary_str\n        decimal = decimal // 2\n    return f\"db{binary_str}db\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/80", "completion": "    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return len(s) >= 3", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "    grade_table = {\n        4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-', 0.0: 'E'\n    }\n    result = []\n    for gpa in grades:\n        for threshold, grade in sorted(grade_table.items(), reverse=True):\n            if gpa >= threshold:\n                result.append(grade)\n                break\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string: str) -> bool:\n    return is_prime(len(string))", "result": "failed: expected an indented block after function definition on line 11 (<string>, line 12)", "passed": false}
{"task_id": "HumanEval/83", "completion": "    total = 0\n    for num in range(10**(n-1), 10**n):\n        if str(num).startswith('1') or str(num).endswith('1'):\n            total += 1\n    return total", "result": "passed", "passed": true}
{"task_id": "HumanEval/84", "completion": "    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N //= 2\n    \n    return bin(binary_sum)[2:]", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "completion": "    even_sum = 0\n    for i, num in enumerate(lst):\n        if i % 2 != 0 and num % 2 == 0:\n            even_sum += num\n    return even_sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "    def sort_word(word):\n        return ''.join(sorted(word))\n    \n    words = s.split(' ')\n    sorted_words = [sort_word(word) for word in words]\n    return ' '.join(sorted_words)", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, val in enumerate(row):\n            if val == x:\n                result.append((row_idx, col_idx))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "completion": "    first = array[0]\n    last = array[-1]\n    is_odd = (first + last) % 2 == 1\n    sorted_array = sorted(array, reverse=not is_odd)\n    return sorted_array", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "completion": "    rotate_amount = 4\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            encrypted_char = chr((ord(char) - start + rotate_amount) % 26 + start)\n            encrypted += encrypted_char\n        else:\n            encrypted += char\n    return encrypted", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "    min1 = min2 = float('inf')\n    for num in lst:\n        if num < min1:\n            min1, min2 = num, min1\n        elif min1 < num < min2:\n            min2 = num\n    return min2 if min2 != float('inf') else None", "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "completion": "    delimiters = ['.', '?', '!']\n    sentences = []\n    current_sentence = ''\n    \n    for char in S:\n        current_sentence += char\n        if char in delimiters:\n            sentences.append(current_sentence.strip())\n            current_sentence = ''\n    \n    if current_sentence.strip():\n        sentences.append(current_sentence.strip())\n    \n    return sum(sentence.startswith('I ') or sentence == 'I' for sentence in sentences)", "result": "passed", "passed": true}
{"task_id": "HumanEval/92", "completion": "    def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return (x == y + z) or (y == x + z) or (z == x + y)\n    return False", "result": "failed: expected an indented block after function definition on line 20 (<string>, line 21)", "passed": false}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiou\"\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in vowels:\n            index = (vowels.index(char.lower()) + 2) % 5\n            new_vowel = vowels[index]\n            encoded_message += new_vowel.upper() if char.isupper() else new_vowel\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    return sum(int(digit) for digit in str(max_prime)) if max_prime != 0 else 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return all_lower or all_upper if all_lower != all_upper and dict else False", "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "completion": "    def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "result": "failed: expected an indented block after function definition on line 13 (<string>, line 14)", "passed": false}
{"task_id": "HumanEval/97", "completion": "    def get_unit_digit(n):\n        return abs(n) % 10\n\n    result = get_unit_digit(a) * get_unit_digit(b)\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "    value = float(value)\n    floor_value = int(value)\n    ceil_value = int(value) + 1 if value > 0 else int(value) - 1\n\n    if value - floor_value == ceil_value - value:\n        return ceil_value if value < 0 else floor_value\n    else:\n        return round(value)", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "completion": "    current_stone_count = n\n    pile = []\n    for i in range(n):\n        pile.append(current_stone_count)\n        current_stone_count += 2 if current_stone_count % 2 != 0 else 1\n    return pile", "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/101", "completion": "    import re\n    words = re.split(r'[ ,]+', s)\n    return words", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/102", "completion": "    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    \n    total = sum(range(n, m+1))\n    count = m - n + 1\n    avg = round(total / count)\n    return bin(avg)", "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n //= 10\n        return False\n\n    return sorted([num for num in x if not has_even_digit(num)])", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "    sorted_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=False)\n    reversed_arr = sorted_arr[::-1]\n    return [f\"{{'1': 'One', '2': 'Two', '3': 'Three', '4': 'Four', '5': 'Five', '6': 'Six', '7': 'Seven', '8': 'Eight', '9': 'Nine'}[str(num)]}\" for num in reversed_arr]", "result": "failed: f-string: single '}' is not allowed (<string>, line 26)", "passed": false}
{"task_id": "HumanEval/106", "completion": "    def factorial(x):\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n    \n    def sum_to_x(x):\n        return x * (x + 1) // 2\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n\n    return count", "result": "failed: invalid literal for int() with base 10: '-'", "passed": false}
{"task_id": "HumanEval/109", "completion": "    def is_sorted(arr):\n        return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n    \n    if not arr:\n        return True\n    \n    for _ in range(len(arr)):\n        arr.insert(0, arr.pop())\n        if is_sorted(arr):\n            return True\n    \n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "completion": "    for num in lst1:\n        if num % 2 == 0:\n            continue\n        found = False\n        for num2 in lst2:\n            if num2 % 2 == 0:\n                lst1[lst1.index(num)] = num2\n                lst2.remove(num2)\n                found = True\n                break\n        if not found:\n            return \"NO\"\n    return \"YES\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "completion": "    letter_counts = {}\n    max_count = 0\n    max_letters = []\n    \n    for char in test.split():\n        if char in letter_counts:\n            letter_counts[char] += 1\n            if letter_counts[char] > max_count:\n                max_count = letter_counts[char]\n                max_letters = [char]\n            elif letter_counts[char] == max_count:\n                max_letters.append(char)\n        else:\n            letter_counts[char] = 1\n    \n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    \n    return result", "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/112", "completion": "    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "    def count_odds(s: str) -> str:\n        return f\"the number of odd elements {sum(1 for c in s if int(c) % 2 != 0)}n the str{sum(1 for c in s if int(c) % 2 != 0)}ng {sum(1 for c in s if int(c) % 2 != 0)} of the {sum(1 for c in s if int(c) % 2 != 0)}nput.\"\n\n    return [count_odds(s) for s in lst]", "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "completion": "    current_sum = nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        current_sum = min(nums[i], current_sum + nums[i])\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "    rows, cols = len(grid), len(grid[0])\n    total_drops = 0\n    \n    for row in range(rows):\n        water_units = 0\n        for col in range(cols):\n            if grid[row][col] == 1:\n                water_units += 1\n        total_drops += math.ceil(water_units / capacity)\n    \n    return total_drops", "result": "passed", "passed": true}
{"task_id": "HumanEval/116", "completion": "    def count_ones(n):\n        return bin(n).count('1')\n\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if bin(arr[j]).count('1') < bin(arr[min_index]).count('1'):\n                min_index = j\n            elif bin(arr[j]).count('1') == bin(arr[min_index]).count('1') and arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n\n    return arr", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "    vowels = \"aeiouAEIOU\"\n    result = []\n    words = s.split()\n    for word in words:\n        consonant_count = sum(1 for letter in word if letter not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "    def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "result": "failed: expected an indented block after function definition on line 17 (<string>, line 18)", "passed": false}
{"task_id": "HumanEval/119", "completion": "    def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    str1, str2 = lst\n    if is_good(str1 + str2) or is_good(str2 + str1):\n        return 'Yes'\n    return 'No'", "result": "passed", "passed": true}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2 == 1:\n            total += num\n    return total", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "    sum_of_elements = 0\n    for i in range(k):\n        if 10 >= abs(arr[i]) >= -100 or -10 >= abs(arr[i]) >= -10:\n            sum_of_elements += arr[i]\n    return sum_of_elements", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "completion": "    sequence = []\n    while n != 1:\n        if n % 2 == 1:\n            sequence.append(n)\n        n = (3 * n + 1) if n % 2 == 1 else n // 2\n    sequence.append(1)\n    return sorted(sequence)", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "    def valid_date(date):\n    if len(date.split('-')) != 3:\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or (day > 31 and month in [1, 3, 5, 7, 8, 10, 12]) or (day > 30 and month in [4, 6, 9, 11]) or (day > 29 and month == 2):\n        return False\n    return True", "result": "failed: expected an indented block after function definition on line 22 (<string>, line 23)", "passed": false}
{"task_id": "HumanEval/125", "completion": "    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return sum(1 for char in txt if ord(char) % 2 == 1 and char.islower())", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "completion": "    def is_sorted(lst):\n    prev = None\n    for num in lst:\n        if prev is not None and num <= prev:\n            return False\n        if lst.count(num) > 1:\n            return False\n        prev = num\n    return True", "result": "failed: expected an indented block after function definition on line 18 (<string>, line 19)", "passed": false}
{"task_id": "HumanEval/127", "completion": "    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    if start_max > end_min:\n        return \"NO\"\n    intersection_length = end_min - start_max + 1\n    if intersection_length <= 1:\n        return \"NO\"\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num == 0:\n            sign_product = 0\n            break\n        sign_product *= 1 if num > 0 else -1\n        magnitude_sum += abs(num)\n    \n    return sign_product * magnitude_sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "completion": "    from heapq import heappush, heappop\n    \n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    visited = [[False] * N for _ in range(N)]\n    heap = []\n    \n    for i in range(N):\n        for j in range(N):\n            heappush(heap, (grid[i][j], i, j))\n    \n    path = []\n    while k > 0:\n        val, x, y = heappop(heap)\n        if visited[x][y]:\n            continue\n        visited[x][y] = True\n        path.append(val)\n        k -= 1\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny]:\n                heappush(heap, (grid[nx][ny], nx, ny))\n    \n    return path[::-1]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "completion": "    tri_seq = [3]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            tri_seq.append(1 + i / 2)\n        else:\n            next_val = tri_seq[-1] + tri_seq[-2] + tri_seq[0] if i > 1 else 8\n            tri_seq.append(next_val)\n    return tri_seq[:n+1]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n        elif int(digit) == 0:\n            return 0\n    return product if has_odd else 0", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0 and any(stack)", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "completion": "    from math import ceil\n    \n    return sum(ceil(x)**2 for x in lst)", "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "completion": "    last_char = txt[-1]\n    if not txt or last_char.isalpha() and txt[-2] == ' ':\n        return True\n    return False", "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "completion": "    def largest_smallest_integers(lst):\n    negatives = []\n    positives = []\n    \n    for num in lst:\n        if num < 0:\n            negatives.append(num)\n        elif num > 0:\n            positives.append(num)\n    \n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    \n    return (a, b)", "result": "failed: expected an indented block after function definition on line 14 (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/137", "completion": "    def convert_to_float(value):\n        return float(value.replace(',', '.'))\n\n    for value in [a, b]:\n        if isinstance(value, str):\n            a, b = convert_to_float(a), convert_to_float(b)\n            break\n\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b", "result": "failed: 'int' object has no attribute 'replace'", "passed": false}
{"task_id": "HumanEval/138", "completion": "    for i in range(2, n-4, 2):\n        for j in range(i+2, n-2, 2):\n            for k in range(j+2, n-0, 2):\n                l = n - (i + j + k)\n                if l > 0 and l % 2 == 0:\n                    return True\n    return False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "completion": "    def factorial(x):\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n    \n    special_fact = 1\n    for i in range(n, 0, -1):\n        special_fact *= factorial(i)\n    \n    return special_fact", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "    current_consecutive_spaces = 0\n    result = []\n    \n    for char in text:\n        if char == ' ':\n            current_consecutive_spaces += 1\n        else:\n            if current_consecutive_spaces > 2:\n                result.append('-')\n            elif current_consecutive_spaces >= 1:\n                result.append('_' * current_consecutive_spaces)\n                current_consecutive_spaces = 0\n            result.append(char)\n    \n    if current_consecutive_spaces > 2:\n        result.append('-')\n    elif current_consecutive_spaces >= 1:\n        result.append('_' * current_consecutive_spaces)\n    \n    return ''.join(result)", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "    import re\n    def file_name_check(file_name):\n        pattern = r'^[a-zA-Z][^\\d].*\\.(txt|exe|dll)$'\n        if re.match(pattern, file_name) and len(re.findall(r'\\d', file_name)) <= 3:\n            return 'Yes'\n        else:\n            return 'No'", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "completion": "    def sum_squares(lst):\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)", "result": "failed: expected an indented block after function definition on line 15 (<string>, line 16)", "passed": false}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    return result_num % result_den == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and all(int(digit) % 2 != 0 for digit in set(str(abs(num)))):\n            count += 1\n    return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/147", "completion": "    def compute_value(i):\n        return i * i - i + 1\n\n    a = [compute_value(i) for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    start_index = None\n    end_index = None\n    \n    for i, planet in enumerate(planets):\n        if planet == planet1:\n            start_index = i\n        elif planet == planet2:\n            end_index = i\n    \n    if start_index is None or end_index is None:\n        return ()\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    \n    return tuple(planets[i] for i in range(start_index + 1, end_index))", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(filtered_lst, key=lambda x: (len(x), x))", "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "completion": "    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            total += num ** 2\n    return total", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "    return [abs(score - guess) for score, guess in zip(game, guess)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "    def calculate_strength(extension: str) -> int:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        return cap - sm\n\n    strongest_extension = None\n    max_strength = float('-inf')\n    for extension in extensions:\n        strength = calculate_strength(extension)\n        if strength > max_strength or (strength == max_strength and extensions.index(extension) < extensions.index(strongest_extension)):\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "    num_str = str(abs(num))\n    even_count = 0\n    odd_count = 0\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    \n    return max_word", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result if any(char.isalpha() for char in s) else result[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    \n    if text == '':\n        return None\n    \n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "    result = []\n    start = min(a, b)\n    end = max(a, b)\n    for num in range(start, end + 1):\n        num_str = str(num)\n        for digit in num_str:\n            digit_int = int(digit)\n            if digit_int % 2 == 0 and digit_int != 0:\n                result.append(digit_int)\n    return sorted(set(result))", "result": "failed: Test 4", "passed": false}
