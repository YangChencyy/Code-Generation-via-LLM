{"task_id": "HumanEval/0", "completion": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    current_group = \"\"\n    \n    for char in paren_string.replace(\" \", \"\"):\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')' and stack:\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = \"\"\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for idx, num in enumerate(numbers):\n        result.append(num)\n        if idx < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "    def max_depth(s: str) -> int:\n        max_nesting = 0\n        current_depth = 0\n        for char in s:\n            if char == '(':\n                current_depth += 1\n                max_nesting = max(max_nesting, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        return max_nesting\n    \n    return [max_depth(group) for group in paren_string.split()]", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "    sum_of_numbers = 0\n    product_of_numbers = 1\n    \n    for number in numbers:\n        sum_of_numbers += number\n        product_of_numbers *= number\n    \n    return sum_of_numbers, product_of_numbers", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "    rolling_max_list = []\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        rolling_max_list.append(current_max)\n    \n    return rolling_max_list", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "completion": "    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[1:][::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "completion": "    return ''.join(str(int(x ^ y)) for x, y in zip(a, b))", "result": "failed: unsupported operand type(s) for ^: 'str' and 'str'", "passed": false}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(1, len(string)+1)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "    return \" \".join(str(i) for i in range(n + 1))", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "    return len(set(char.lower() for char in string if char.isalpha()))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/17", "completion": "    return [4 if x == 'o' else 2 if x == 'o|' else 1 for x in music_string.split()]", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "    numeral_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numerals = sorted(numbers.split(), key=lambda x: numeral_map[x])\n    return ' '.join(sorted_numerals)", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "    min_distance = float('inf')\n    result = (0.0, 0.0)\n    \n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx < idx2:\n                distance = abs(elem - elem2)\n                if distance < min_distance:\n                    min_distance = distance\n                    result = (min(elem, elem2), max(elem, elem2))\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "    return len(string)", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n\n    return 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    d = 2\n    while n >= d * d:\n        while n % d == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "    def bisection(a, b):\n        if poly(xs, a) * poly(xs, b) > 0:\n            raise ValueError(\"No root in the interval\")\n        mid = (a + b) / 2\n        while abs(poly(xs, mid)) > 1e-9:\n            if poly(xs, mid) * poly(xs, a) < 0:\n                b = mid\n            else:\n                a = mid\n            mid = (a + b) / 2\n        return mid\n\n    start = 0\n    end = 0\n    for coeff in xs:\n        if coeff != 0:\n            if len(xs) % 2 == 0:\n                start = min(start, math.log(-coeff / xs[-1]) / math.log(-xs.index(coeff) / len(xs)))\n            else:\n                start = min(start, math.log(-coeff / xs[-1]) / math.log(-(len(xs) - xs.index(coeff) - 1) / len(xs)))\n            end = max(end, math.log(-coeff / xs[-1]) / math.log(-(len(xs) - xs.index(coeff) - 1) / len(xs)))\n    return bisection(start, end)", "result": "failed: math domain error", "passed": false}
{"task_id": "HumanEval/33", "completion": "    return [\n        *sorted(l[i] for i in range(len(l)) if i % 3 == 0),\n        *l[i+1:-1] if len(l) % 3 else l[i+1:]\n    ]", "result": "failed: invalid syntax (<string>, line 14)", "passed": false}
{"task_id": "HumanEval/34", "completion": "    unique_elements = list(set(l))\n    unique_elements.sort()\n    return unique_elements", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "    return max(l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "    even_indices = [i for i, _ in enumerate(l) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    \n    l_prime = l[:]\n    for i, val in zip(even_indices, even_values):\n        l_prime[i] = val\n    \n    return l_prime", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b", "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)-2):\n        seen = set()\n        for j in range(i+1, len(l)):\n            complement = - (l[i] + l[j])\n            if complement in seen:\n                return True\n            seen.add(l[j])\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "    return n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "    def convert(num, base):\n        digits = []\n        while num:\n            digits.append(str(num % base))\n            num //= base\n        return ''.join(digits[::-1])\n\n    return convert(x, base)", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "    fib_values = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        next_value = fib_values[0] + fib_values[1] + fib_values[2] + fib_values[3]\n        fib_values = [fib_values[1], fib_values[2], fib_values[3], next_value]\n    return fib_values[3]", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    n = n % (p - 1)\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n = n // 2\n        result = (result * result) % p\n    return result % p", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "    return x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "    inc = dec = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            dec = False\n        elif l[i] < l[i-1]:\n            inc = False\n            \n    return inc or dec", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "    from typing import List\n    \n    def common(l1: List[int], l2: List[int]) -> List[int]:\n        set1 = set(l1)\n        set2 = set(l2)\n        common_elements = set1.intersection(set2)\n        return sorted(list(common_elements))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/59", "completion": "    for i in range(int(n**0.5), 1, -1):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n    return n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "    balance = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            balance += 1\n        elif bracket == \")\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "    return [i * x for i, x in enumerate(xs)][1:]", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "    return sum(1 for char in s if char.lower() in 'aeiou' and not (char == 'y' and s.lower().endswith(char.lower())))", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    length = len(num_str)\n    if shift >= length:\n        return num_str[::-1]\n    else:\n        return num_str[-shift:] + num_str[:-shift]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if c.isupper())", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "    total_fruits = n\n    _, apples, _, oranges = s.split()\n    apples = int(apples[:-1])\n    oranges = int(oranges)\n    return total_fruits - apples - oranges", "result": "failed: too many values to unpack (expected 4)", "passed": false}
{"task_id": "HumanEval/68", "completion": "    smallest_even = None\n    smallest_index = None\n    \n    for idx, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even is None or value < smallest_even or (value == smallest_even and idx < smallest_index):\n                smallest_even = value\n                smallest_index = idx\n                \n    return [smallest_even, smallest_index] if smallest_even is not None else []", "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "completion": "    from collections import Counter\n    freq_counter = Counter(lst)\n    for num in sorted(freq_counter.keys(), reverse=True):\n        if num <= freq_counter[num]:\n            return num\n    return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "    def is_palindrome(lst):\n        return lst == lst[::-1]\n    \n    return is_palindrome(q) and sum(q) <= w", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "    def count_chars(lst):\n        return sum(len(s) for s in lst)\n\n    chars1 = count_chars(lst1)\n    chars2 = count_chars(lst2)\n\n    return lst1 if chars1 <= chars2 else lst2 if chars2 <= chars1 else lst1", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "completion": "    import math\n    return x == n ** round(math.log(x, n)) and x > 0 and n > 1", "result": "failed: float division by zero", "passed": false}
{"task_id": "HumanEval/77", "completion": "    return round(a ** (1/3)) ** 3 == a", "result": "failed: type complex doesn't define __round__ method", "passed": false}
{"task_id": "HumanEval/78", "completion": "    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_hex_digits)", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "    return len(s) >= 3 and all(s[i] != s[i+1] == s[i+2] != s[i+1] != s[i] for i in range(len(s)-2))", "result": "failed: abcd", "passed": false}
{"task_id": "HumanEval/81", "completion": "    def determine_grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        elif gpa > 0.0:\n            return 'D-'\n        else:\n            return 'E'\n    \n    return [determine_grade(gpa) for gpa in grades]", "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "    total = 9 * 10**(n-2) * 2 - 10**(n-2)\n    return total", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "    binary_sum = sum(int(digit) for digit in bin(N)[2:])\n    return bin(binary_sum)[2:]", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "    def sort_word(word):\n        return ''.join(sorted(word))\n    \n    return ' '.join(sort_word(word) if word.isalpha() else word for word in s.split())", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/87", "completion": "    result = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]\n    for row in result:\n        row = list(row)\n        row[1] = len(lst) - row[1] - 1\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return [(x[0], len(lst) - x[1] - 1) for x in result]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    first_last_sum = array[0] + array[-1]\n    sorted_array = sorted(array)\n    if first_last_sum % 2 == 0:\n        sorted_array.reverse()\n    return sorted_array", "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "completion": "    def rotate(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= c <= 'Z':\n            return chr((ord(c) - ord('A') + 4) % 26 + ord('A'))\n        return c\n    \n    return ''.join(rotate(c) for c in s)", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "    min1 = min2 = float('inf')\n    for num in lst:\n        if num < min1:\n            min1, min2 = num, min1\n        elif min1 < num < min2:\n            min2 = num\n    return min2 if min2 != float('inf') else None", "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "completion": "    import re\n    sentences = re.split(r'[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I '):\n            count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiou\"\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in vowels:\n            index = (vowels.index(char.lower()) + 2) % 5\n            new_vowel = vowels[index]\n            encoded_message += new_vowel.upper() if char.isupper() else new_vowel\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    max_prime = max((x for x in lst if is_prime(x)), default=0)\n    return sum_of_digits(max_prime)", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    \n    lower_case = set()\n    upper_case = set()\n    \n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            lower_case.add(key)\n        elif key.isupper():\n            upper_case.add(key)\n        else:\n            return False\n    \n    return len(lower_case) == len(dict) or len(upper_case) == len(dict)", "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    \n    return primes", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    rounded_num = round(num)\n    if abs(num - rounded_num) == 0.5:\n        return rounded_num + num // abs(num)\n    return rounded_num", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/100", "completion": "    current_stone_count = n\n    pile = []\n    for _ in range(n):\n        pile.append(current_stone_count)\n        current_stone_count += 2 if current_stone_count % 2 != 0 else 1\n    return pile", "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/101", "completion": "    import re\n    return re.split(r'[ ,]+', s)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/102", "completion": "    if x > y:\n        return -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    \n    average = round((n + m) / 2)\n    return \"0b\" + bin(average)[2:]", "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n //= 10\n        return False\n\n    return sorted([num for num in x if not has_even_digit(num)])", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "    def num_to_word(num):\n        num_to_word_map = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n        return num_to_word_map.get(num, \"\")\n    \n    filtered_sorted_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_to_word(num) for num in filtered_sorted_arr]", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        return x * factorial(x - 1)\n    \n    def sum_to_x(x):\n        return x * (x + 1) // 2\n    \n    return [factorial(i) if i % 2 == 0 else sum_to_x(i) for i in range(1, n + 1)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "result": "failed: invalid literal for int() with base 10: '-'", "passed": false}
{"task_id": "HumanEval/109", "completion": "    def is_sorted(arr):\n        return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n    \n    if not arr:\n        return True\n    \n    for i in range(len(arr)):\n        shifted_arr = arr[i:] + arr[:i]\n        if is_sorted(shifted_arr):\n            return True\n    \n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "completion": "    for num in lst1:\n        if num % 2 == 0:\n            continue\n        found = False\n        for num2 in lst2:\n            if num2 % 2 == 0:\n                lst1[lst1.index(num)] = num2\n                lst2[lst2.index(num2)] = num\n                found = True\n                break\n        if not found:\n            return \"NO\"\n    return \"YES\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "completion": "    from collections import defaultdict\n    \n    counts = defaultdict(int)\n    max_count = 0\n    result = {}\n    \n    for char in test.split():\n        counts[char] += 1\n        if counts[char] > max_count:\n            max_count = counts[char]\n            result = {char: max_count}\n        elif counts[char] == max_count:\n            result[char] = max_count\n            \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "completion": "    result = ''.join(ch for ch in s if ch not in c)\n    return (result, result == result[::-1])", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "    def count_odds(s):\n        return str(s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'))\n\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count_odds(s), count_odds(s), count_odds(s), count_odds(s)) for s in lst]", "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        \n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "    def count_water(well):\n        return sum(well)\n\n    total_drops = 0\n    for well in grid:\n        total_drops += math.ceil(count_water(well) / capacity)\n    \n    return total_drops", "result": "passed", "passed": true}
{"task_id": "HumanEval/116", "completion": "    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    words = s.split()\n    result = []\n    \n    for word in words:\n        count = sum(1 for char in word if char in consonants)\n        if count == n:\n            result.append(word)\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "completion": "    def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    str1, str2 = lst\n    if is_good(str1 + str2) or is_good(str2 + str1):\n        return 'Yes'\n    return 'No'", "result": "passed", "passed": true}
{"task_id": "HumanEval/120", "completion": "    import heapq\n    return heapq.nlargest(k, arr)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "    return sum(x for x in arr[:k] if 0 <= x < 100 or -100 <= x < 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "    def collatz_sequence(n):\n        sequence = []\n        while n != 1:\n            sequence.append(n)\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n        sequence.append(1)\n        return sequence\n\n    seq = collatz_sequence(n)\n    return sorted([num for num in seq if num % 2 != 0])", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "    def is_valid_month(month):\n        return 1 <= int(month) <= 12\n\n    def is_valid_day(day, month, year):\n        if month in {'04', '06', '09', '11'}:\n            return 1 <= int(day) <= 30\n        elif month in {'01', '03', '05', '07', '08', '10', '12'}:\n            return 1 <= int(day) <= 31\n        elif month == '02':\n            return 1 <= int(day) <= 29 if (int(year) % 4 == 0 and int(year) % 100 != 0) or (int(year) % 400 == 0) else 1 <= int(day) <= 28\n        return False\n\n    if len(date.split('-')) != 3:\n        return False\n\n    month, day, year = date.split('-')\n    if not is_valid_month(month) or not is_valid_day(day, month, year):\n        return False\n\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "completion": "    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return sum(1 for char in txt if ord(char) % 2 == 1 and char.islower())", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 1 and lst[i] == lst[i + 1]:\n            return False\n    return True", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    \n    if start_max > end_min:\n        return \"NO\"\n    \n    intersection_length = end_min - start_max + 1\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num == 0:\n            sign_product = 0\n            break\n        sign_product *= abs(num) / num\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "completion": "    from heapq import heappush, heappop\n    \n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    visited = [[False] * N for _ in range(N)]\n    heap = [(grid[0][0], 0, 0)]\n    \n    while k > 0:\n        val, x, y = heappop(heap)\n        visited[x][y] = True\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny]:\n                heappush(heap, (grid[nx][ny], nx, ny))\n        k -= 1\n    \n    return sorted([grid[x][y] for x in range(N) for y in range(N) if visited[x][y]])[:k]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [3]\n    sequence = [3]\n    sequence.append(2)\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            next_value = 1 + i / 2\n        else:\n            next_value = sequence[-1] + sequence[-2] + sequence[0] if i > 2 else 8\n        sequence.append(next_value)\n    return sequence[:n+1]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n        elif int(digit) == 0:\n            return 0\n    return product if has_odd else 0", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return any(stack)", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "completion": "    from math import ceil\n    \n    return sum(ceil(x)**2 for x in lst)", "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "completion": "    last_char = txt[-1]\n    if not txt.strip() or (last_char.isalpha() and last_char not in txt[-2].split()):\n        return True\n    return False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "completion": "    negative = None\n    positive = None\n    \n    for num in lst:\n        if num < 0:\n            if negative is None or num > negative:\n                negative = num\n        elif num > 0:\n            if positive is None or num < positive:\n                positive = num\n                \n    return (negative, positive)", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "    def convert_to_float(value):\n        return float(value.replace(',', '.'))\n    \n    a_float = convert_to_float(a) if isinstance(a, str) else a\n    b_float = convert_to_float(b) if isinstance(b, str) else b\n    \n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "completion": "    return n >= 8 and n % 2 == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "completion": "    from math import factorial\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "    result = []\n    space_count = 0\n    \n    for char in text:\n        if char == \" \":\n            space_count += 1\n        else:\n            if space_count == 1:\n                result.append(\"_\")\n            elif space_count > 2:\n                result.append(\"-\")\n            space_count = 0\n    \n    if space_count == 1:\n        result.append(\"_\")\n    elif space_count > 2:\n        result.append(\"-\")\n    \n    return \"\".join(result)", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "    import re\n    pattern = r'^[a-zA-Z][^\\d].*\\.(txt|exe|dll)$'\n    count_digits = sum(c.isdigit() for c in file_name.split('.')[0])\n    return 'Yes' if re.match(pattern, file_name) and count_digits <= 3 else 'No'", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "completion": "    def process_value(index, value):\n        if index % 3 == 0:\n            return value ** 2\n        elif index % 4 == 0:\n            return value ** 3\n        else:\n            return value\n    \n    return sum(process_value(i, x) for i, x in enumerate(lst))", "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    \n    return ' '.join(result)", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "completion": "    def has_odd_ends(n):\n        num_str = str(abs(n))\n        first_digit = int(num_str[0])\n        last_digit = int(num_str[-1])\n        return first_digit % 2 == 1 and last_digit % 2 == 1\n    \n    count = 0\n    for num in nums:\n        if num > 10 and has_odd_ends(num):\n            count += 1\n            \n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    start = None\n    end = None\n    \n    for i, p in enumerate(planets):\n        if p == planet1:\n            start = i\n        if p == planet2:\n            end = i\n            \n    if start is None or end is None:\n        return ()\n    \n    if start > end:\n        start, end = end, start\n        \n    return tuple(planets[start+1:end])", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(filtered_lst, key=lambda x: (len(x), x))", "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "completion": "    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return x if is_prime(n) else y", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 == 1)", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "    return [abs(score - guess) for score, guess in zip(game, guess)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "    def extension_strength(extension: str) -> int:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        return cap - sm\n\n    strongest_extension = max(extensions, key=extension_strength)\n    return f\"{class_name}.{strongest_extension}\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(b)):\n        rotation = b[i:] + b[:i]\n        if rotation in a:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n            \n    return max_word", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]", "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "completion": "    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += f\" {operator[i]} {operand[i+1]}\"\n    return eval(expression)", "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "completion": "    result = []\n    has_letters = False\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n    \n    if not has_letters:\n        return s[::-1]\n    \n    return ''.join(result)", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    \n    if text == '':\n        return None\n    \n    return hashlib.md5(text.encode()).hexdigest()", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "    result = []\n    start = min(a, b)\n    end = max(a, b)\n    \n    for num in range(start, end + 1):\n        num_str = str(num)\n        for digit in num_str:\n            digit_int = int(digit)\n            if digit_int % 2 == 0 and digit_int != 0:\n                result.append(digit_int)\n                break\n    \n    return sorted(set(result))", "result": "failed: Test 4", "passed": false}
