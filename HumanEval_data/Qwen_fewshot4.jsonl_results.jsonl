{"task_id": "HumanEval/0", "completion": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "    paren_string = paren_string.replace(\" \", \"\")\n    stack = []\n    result = []\n    current_group = \"\"\n    \n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            current_group += char\n        elif char == \")\":\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = \"\"\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    return number - integer_part", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for idx, num in enumerate(numbers):\n        result.append(num)\n        if idx < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "    depths = []\n    max_depth = 0\n    current_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            depths.append(max_depth)\n            max_depth = 0\n            \n    depths.append(max_depth)\n    \n    return depths", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "    sum_of_numbers = 0\n    product_of_numbers = 1\n    \n    for number in numbers:\n        sum_of_numbers += number\n        product_of_numbers *= number\n    \n    return sum_of_numbers, product_of_numbers", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "    max_so_far = numbers[0]\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "completion": "    def longest_palindromic_postfix(s: str) -> str:\n        for i in range(len(s)):\n            if s[i:] == s[i:][::-1]:\n                return s[i:]\n        return ''\n    \n    palindromic_postfix = longest_palindromic_postfix(string)\n    prefix_to_reverse = string[:len(string) - len(palindromic_postfix)]\n    return string + prefix_to_reverse[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "completion": "    return ''.join(str(int(x ^ y)) for x, y in zip(a, b))", "result": "failed: unsupported operand type(s) for ^: 'str' and 'str'", "passed": false}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(1, len(string) + 1)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "    return len(set(char.lower() for char in string if char.isalpha()))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/17", "completion": "    return [4 if char == 'o' else 2 if char == 'o|' else 1 for char in music_string.split()]", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while start <= len(string) - len(substring):\n        pos = string.find(substring, start)\n        if pos == -1:\n            break\n        count += 1\n        start = pos + 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "    num_dict = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n    sorted_nums = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_nums)", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "    min_distance = float('inf')\n    result = (0.0, 0.0)\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < min_distance:\n                    min_distance = distance\n                    result = (min(elem, elem2), max(elem, elem2))\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "    return len(string)", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "    from collections import OrderedDict\n    \n    return list(OrderedDict.fromkeys(numbers))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "    def f(x):\n        return poly(xs, x)\n\n    def bisection(a, b):\n        if f(a) * f(b) >= 0:\n            print(\"Bisection method fails.\")\n            return None\n        c = a\n        while (b - a) >= 0.01:  # 0.01 is the tolerance\n            c = (a + b) / 2\n            if f(c) == 0.0:\n                break\n            if f(c) * f(a) < 0:\n                b = c\n            else:\n                a = c\n        return c\n\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n\n    largest_coeff = max((abs(coeff), idx) for idx, coeff in enumerate(xs))[1]\n    if largest_coeff == 0:\n        raise ValueError(\"The largest non-zero coefficient index must be non-zero.\")\n\n    return bisection(-10, 10)", "result": "failed: The largest non-zero coefficient index must be non-zero.", "passed": false}
{"task_id": "HumanEval/33", "completion": "    divisible_by_three = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    return [next((x for x in divisible_by_three if x == l[i]), l[i]) for i in range(len(l))]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "completion": "    unique_elements = list(set(l))\n    unique_elements.sort()\n    return unique_elements", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "    return max(l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "    even_indices = [i for i, _ in enumerate(l) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    \n    l_prime = l.copy()\n    for i, val in zip(even_indices, even_values):\n        l_prime[i] = val\n    \n    return l_prime", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "    primes = [2, 3]\n    fibs = [2, 1, 1]\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    while len(fibs) < n:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        if is_prime(next_fib) and next_fib not in primes:\n            primes.append(next_fib)\n    \n    return primes[n-1]", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l) - 2):\n        seen = set()\n        for j in range(i + 1, len(l)):\n            complement = -(l[i] + l[j])\n            if complement in seen:\n                return True\n            seen.add(l[j])\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "    return n * n // 2", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "    def convert_to_base(num, target_base):\n        digits = []\n        while num > 0:\n            digits.append(str(num % target_base))\n            num //= target_base\n        return ''.join(digits[::-1])\n\n    return convert_to_base(x, base)", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "    fib4_sequence = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_sequence[n]\n    for i in range(4, n + 1):\n        next_value = sum(fib4_sequence[-4:])\n        fib4_sequence.append(next_value)\n    return fib4_sequence[-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "    def mod_exp(base, exp, mod):\n        result = 1\n        base = base % mod\n        while exp > 0:\n            if exp % 2 == 1:\n                result = (result * base) % mod\n            exp = exp >> 1\n            base = (base * base) % mod\n        return result\n\n    return mod_exp(2, n, p)", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "    return x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "    balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        elif bracket == '>':\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "    inc = dec = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            dec = False\n        elif l[i] < l[i - 1]:\n            inc = False\n            \n    return inc or dec", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "    unique_l1 = set(l1)\n    unique_l2 = set(l2)\n    common_elements = unique_l1.intersection(unique_l2)\n    return sorted(list(common_elements))", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    \n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n //= i\n    \n    if n > 2:\n        max_prime = n\n    \n    return max_prime", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "    return [i * x for i, x in enumerate(xs)][1:]", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "    return sum(1 for char in s if char.lower() in 'aeiou' and not (char == 'y' and s.lower().endswith(char.lower())))", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    length = len(num_str)\n    if shift >= length:\n        return num_str[::-1]\n    return num_str[-shift:] + num_str[:-shift]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if c.isupper())", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "    fruits_str = s.split()\n    apples = int(fruits_str[1])\n    oranges = int(fruits_str[7])\n    return n - apples - oranges", "result": "failed: invalid literal for int() with base 10: 'apples'", "passed": false}
{"task_id": "HumanEval/68", "completion": "    smallest_even = None\n    smallest_index = None\n    \n    for idx, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even is None or value < smallest_even or (value == smallest_even and idx < smallest_index):\n                smallest_even = value\n                smallest_index = idx\n                \n    return [smallest_even, smallest_index] if smallest_even is not None else []", "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "completion": "    from collections import Counter\n    \n    freq = Counter(lst)\n    for num in sorted(freq.keys(), reverse=True):\n        if num <= freq[num]:\n            return num\n    return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "    from heapq import heapify, heappop, heappush\n    \n    min_heap = lst[:]\n    heapify(min_heap)\n    max_heap = [-x for x in min_heap]\n    result = []\n    \n    while min_heap or max_heap:\n        if min_heap:\n            result.append(heappop(min_heap))\n        if max_heap:\n            result.append(-heappop(max_heap))\n    \n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/71", "completion": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "    def is_palindrome(lst):\n        return lst == lst[::-1]\n    \n    return is_palindrome(q) and sum(q) <= w", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "    def total_chars(lst):\n        return sum(len(s) for s in lst)\n\n    chars_lst1 = total_chars(lst1)\n    chars_lst2 = total_chars(lst2)\n\n    return lst1 if chars_lst1 <= chars_lst2 else lst2 if chars_lst1 > chars_lst2 else lst1", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "completion": "    return n ** round(math.log(x, n)) == x if n > 1 else x == 1", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/77", "completion": "    return int(round(a ** (1. / 3))) ** 3 == a or (-int(round(a ** (1. / 3)))) ** 3 == a", "result": "failed: type complex doesn't define __round__ method", "passed": false}
{"task_id": "HumanEval/78", "completion": "    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_hex_digits)", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "    binary_str = bin(decimal)[2:]\n    return f\"db{binary_str}db\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "    return len(s) >= 3 and all(s[i] != s[i+1] == s[i+2] != s[i+1] != s[i] for i in range(len(s)-2))", "result": "failed: abcd", "passed": false}
{"task_id": "HumanEval/81", "completion": "    def determine_grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        elif gpa > 0.0:\n            return 'D-'\n        else:\n            return 'E'\n    \n    return [determine_grade(g) for g in grades]", "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "    total = 9 * 10**(n-1) + 9 * 10**(n-1) - 9\n    return total", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "    return bin(sum(int(digit) for digit in str(N)))[2:]", "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "    def sort_word(word):\n        return ''.join(sorted(word))\n    \n    return ' '.join(sort_word(word) if word.isalpha() else word for word in s.split())", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/87", "completion": "    result = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]\n    for row in result:\n        row = list(row)\n        row[1] = len(lst) - row[1] - 1\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return [(x[0], len(lst) - x[1] - 1) for x in result]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/88", "completion": "    first_element = array[0] if array else 0\n    last_element = array[-1] if array else 0\n    sort_order = sorted if (first_element + last_element) % 2 != 0 else sorted[::-1]\n    return sort_order(array).copy()", "result": "failed: 'builtin_function_or_method' object is not subscriptable", "passed": false}
{"task_id": "HumanEval/89", "completion": "    def rotate(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= c <= 'Z':\n            return chr((ord(c) - ord('A') + 4) % 26 + ord('A'))\n        return c\n    \n    return ''.join(rotate(c) for c in s)", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "    lst = sorted(set(lst))\n    return lst[1] if len(lst) > 1 else None", "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "completion": "    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    return sum(sentence.strip().startswith('I ') for sentence in sentences)", "result": "passed", "passed": true}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiou\"\n    result = \"\"\n    for char in message:\n        if char.lower() in vowels:\n            index = (vowels.find(char.lower()) + 2) % 5\n            new_vowel = vowels[index]\n            result += new_vowel.upper() if char.isupper() else new_vowel\n        else:\n            result += char.swapcase()\n    return result", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    prime = max(filter(is_prime, lst))\n    return sum_of_digits(prime) if prime else 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    lower_case = set()\n    upper_case = set()\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            lower_case.add(key)\n        elif key.isupper():\n            upper_case.add(key)\n        else:\n            return False\n    return len(lower_case) == len(dict) or len(upper_case) == len(dict)", "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in 'AEIOU')", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    rounded_num = round(num)\n    if abs(num - rounded_num) == 0.5:\n        return rounded_num + num // abs(num)\n    return rounded_num", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/100", "completion": "    current_stone_count = n\n    pile = []\n    for _ in range(n):\n        pile.append(current_stone_count)\n        current_stone_count += 2\n    return pile", "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "completion": "    return s.replace(',', ' ').split()", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "    if x > y:\n        return -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    \n    avg = round((n + m) / 2)\n    return \"0b\" + bin(avg)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        while n > 0:\n            if n % 10 % 2 == 0:\n                return True\n            n //= 10\n        return False\n\n    return sorted([num for num in x if not has_even_digit(num)])", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "    def num_to_word(num):\n        num_to_word_map = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n        return num_to_word_map.get(num, \"\")\n    \n    filtered_sorted_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=False)\n    reversed_arr = filtered_sorted_arr[::-1]\n    return [num_to_word(num) for num in reversed_arr]", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    def sum_to_x(x):\n        return x * (x + 1) // 2\n    \n    return [factorial(i) if i % 2 == 0 else sum_to_x(i) for i in range(1, n + 1)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "result": "failed: invalid literal for int() with base 10: '-'", "passed": false}
{"task_id": "HumanEval/109", "completion": "    def is_sorted(arr):\n        return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n    \n    if not arr:\n        return True\n    \n    for i in range(len(arr)):\n        shifted_arr = arr[i:] + arr[:i]\n        if is_sorted(shifted_arr):\n            return True\n    \n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "completion": "    for num in lst1:\n        if num % 2 == 0:\n            continue\n        found = False\n        for num2 in lst2:\n            if num2 % 2 == 0:\n                lst1[lst1.index(num)] = num2\n                lst2[lst2.index(num2)] = num\n                found = True\n                break\n        if not found:\n            return \"NO\"\n    return \"YES\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "completion": "    from collections import Counter\n    \n    counts = Counter(test.split())\n    max_count = max(counts.values(), default=0)\n    return {letter: count for letter, count in counts.items() if count == max_count}", "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "completion": "    result = ''.join(ch for ch in s if ch not in c)\n    return (result, result == result[::-1])", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "    def count_odds(s):\n        return sum(1 for char in s if int(char) % 2 != 0)\n\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count_odds(lst[i]), count_odds(lst[i]), count_odds(lst[i]), count_odds(lst[i])) for i in range(len(lst))]", "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n            \n    return min_sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "    def count_water(well):\n        return sum(well)\n\n    total_drops = 0\n    for well in grid:\n        total_drops += math.ceil(count_water(well) / capacity)\n\n    return total_drops", "result": "passed", "passed": true}
{"task_id": "HumanEval/116", "completion": "    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    words = s.split()\n    result = []\n    \n    for word in words:\n        count = sum(1 for char in word if char in consonants)\n        if count == n:\n            result.append(word)\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "completion": "    def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    str1, str2 = lst\n    if is_good(str1 + str2) or is_good(str2 + str1):\n        return 'Yes'\n    return 'No'", "result": "passed", "passed": true}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "completion": "    return sum(val for idx, val in enumerate(lst) if idx % 2 == 0 and val % 2 != 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "    return sum(x for x in arr[:k] if 0 <= x < 100 or -100 <= x < 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "    def collatz_sequence(n):\n        sequence = []\n        while n != 1:\n            sequence.append(n)\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n        sequence.append(1)\n        return sequence\n    \n    sequence = collatz_sequence(n)\n    odd_numbers = [num for num in sequence if num % 2 != 0]\n    return sorted(odd_numbers)", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "    try:\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2 and day > 29:\n            return False\n        return True\n    except ValueError:\n        return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)", "result": "passed", "passed": true}
{"task_id": "HumanEval/126", "completion": "    return all(lst[i] <= lst[i + 1] and lst.count(lst[i]) <= 1 for i in range(len(lst) - 1))", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "completion": "    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    \n    if start_max > end_min:\n        return \"NO\"\n    \n    intersection_length = end_min - start_max + 1\n    \n    if intersection_length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n\n    sign_product = 1\n    magnitude_sum = 0\n\n    for num in arr:\n        if num == 0:\n            sign_product = 0\n            break\n        elif num < 0:\n            sign_product *= -1\n        magnitude_sum += abs(num)\n\n    return sign_product * magnitude_sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "completion": "    from heapq import heappush, heappop\n\n    class Cell:\n        def __init__(self, row, col, path):\n            self.row = row\n            self.col = col\n            self.path = path\n        \n        def __lt__(self, other):\n            for i in range(len(self.path)):\n                if self.path[i] != other.path[i]:\n                    return self.path[i] < other.path[i]\n            return False\n    \n    def minPath(grid, k):\n        N = len(grid)\n        visited = [[False] * N for _ in range(N)]\n        heap = []\n        directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n        \n        heappush(heap, Cell(0, 0, [grid[0][0]]))\n        while heap:\n            cell = heappop(heap)\n            if len(cell.path) == k:\n                return cell.path\n            visited[cell.row][cell.col] = True\n            for dr, dc in directions:\n                newRow, newCol = cell.row + dr, cell.col + dc\n                if newRow >= 0 and newRow < N and newCol >= 0 and newCol < N and not visited[newRow][newCol]:\n                    newPath = cell.path + [grid[newRow][newCol]]\n                    heappush(heap, Cell(newRow, newCol, newPath))\n                    visited[newRow][newCol] = True\n        return []", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "completion": "    tri_seq = [1, 3]\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return tri_seq[:n+1]\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            tri_seq.append(1 + i / 2)\n        else:\n            next_val = tri_seq[i-1] + tri_seq[i-2] + tri_seq[i]\n            tri_seq.append(next_val)\n    \n    return tri_seq[:n+1]", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n        elif int(digit) == 0:\n            return 0\n    return product if has_odd else 0", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return any(stack)", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "completion": "    from math import ceil\n    \n    return sum(ceil(x)**2 for x in lst)", "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "completion": "    last_char = txt.strip()\n    if not last_char:\n        return False\n    last_word_char = last_char[-1]\n    return last_word_char.isalpha() and last_char[-2:] == ' ' or last_char[-2:] == ''", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "completion": "    negative = None\n    positive = None\n    \n    for num in lst:\n        if num < 0:\n            if negative is None or num > negative:\n                negative = num\n        elif num > 0:\n            if positive is None or num < positive:\n                positive = num\n                \n    return (negative, positive)", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "    def to_float(val):\n        return float(val.replace(',', '.'))\n\n    a_val = to_float(a) if isinstance(a, str) else a\n    b_val = to_float(b) if isinstance(b, str) else b\n\n    if a_val > b_val:\n        return a\n    elif b_val > a_val:\n        return b\n    else:\n        return None", "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "completion": "    return n >= 8 and n % 2 == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "completion": "    from math import factorial\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    space_count = 0\n    \n    for char in text:\n        if char == \" \":\n            space_count += 1\n        else:\n            if space_count == 1:\n                result += \"_\"\n            elif space_count > 2:\n                result = result[:-1] + \"-\"\n            space_count = 0\n    \n    if space_count == 1:\n        result += \"_\"\n    elif space_count > 2:\n        result = result[:-1] + \"-\"\n    \n    return result if space_count == 0 else result.lstrip(\"_\")", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "    import re\n    pattern = r'^[a-zA-Z][^\\d].*\\.[txt|exe|dll]{4}$'\n    return 'Yes' if re.match(pattern, file_name) else 'No'", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "completion": "    def process_element(index, value):\n        if index % 3 == 0 and index % 4 != 0:\n            return value ** 2\n        elif index % 4 == 0:\n            return value ** 3\n        else:\n            return value\n    \n    return sum(process_element(idx, val) for idx, val in enumerate(lst))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "    num1, den1 = map(int, x.split('/'))\n    num2, den2 = map(int, n.split('/'))\n    return (num1 * den2) % (den1 * num2) == 0", "result": "failed: test1", "passed": false}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "completion": "    def is_odd(n):\n        return n % 2 != 0\n    \n    count = 0\n    for num in nums:\n        if num > 10 and is_odd(abs(int(str(num)[0]))) and is_odd(abs(int(str(num)[-1]))):\n            count += 1\n            \n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    start = None\n    end = None\n    \n    for i, p in enumerate(planets):\n        if p == planet1:\n            start = i\n        if p == planet2:\n            end = i\n    \n    if start is None or end is None:\n        return ()\n    \n    if start > end:\n        start, end = end, start\n    \n    return tuple(planets[start+1:end])", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(filtered_lst, key=lambda x: (len(x), x))", "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "completion": "    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0) if lst else 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "    return [abs(score - guess) for score, guess in zip(game, guess)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "    def extension_strength(extension):\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        return cap - sm\n    \n    strongest_extension = max(extensions, key=extension_strength)\n    return f\"{class_name}.{strongest_extension}\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(b)):\n        rotation = b[i:] + b[:i]\n        if rotation in a:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 == 1)\n    return (even_count, odd_count)", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "    return sorted([a, b, c])[2]**2 == sorted([a, b, c])[0]**2 + sorted([a, b, c])[1]**2", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n            \n    return max_word", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]", "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "completion": "    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n    \n    return eval(expression)", "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "completion": "    result = []\n    has_letters = False\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n    \n    if not has_letters:\n        return s[::-1]\n    else:\n        return ''.join(result)", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "    result = []\n    start = min(a, b)\n    end = max(a, b)\n    \n    for num in range(start, end + 1):\n        num_str = str(num)\n        for digit in num_str:\n            digit_int = int(digit)\n            if digit_int % 2 == 0 and digit_int not in result:\n                result.append(digit_int)\n    \n    return sorted(result)", "result": "failed: Test 1", "passed": false}
